(declare-const X String)
; (^([A-Za-z])([-_.\dA-Za-z]{1,10})([\dA-Za-z]{1}))(@)(([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})|(([\dA-Za-z{1}][-_.\dA-Za-z]{1,25})\.([A-Za-z]{2,4}))$)
(assert (not (str.in.re X (re.++ (str.to.re "@") (re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (str.to.re ".") ((_ re.loop 1 3) (re.range "0" "9")) (str.to.re ".") ((_ re.loop 1 3) (re.range "0" "9")) (str.to.re ".") ((_ re.loop 1 3) (re.range "0" "9"))) (re.++ (str.to.re ".") ((_ re.loop 2 4) (re.union (re.range "A" "Z") (re.range "a" "z"))) (re.union (re.range "0" "9") (re.range "A" "Z") (re.range "a" "z") (str.to.re "{") (str.to.re "1") (str.to.re "}")) ((_ re.loop 1 25) (re.union (str.to.re "-") (str.to.re "_") (str.to.re ".") (re.range "0" "9") (re.range "A" "Z") (re.range "a" "z"))))) (str.to.re "\x0a") (re.union (re.range "A" "Z") (re.range "a" "z")) ((_ re.loop 1 10) (re.union (str.to.re "-") (str.to.re "_") (str.to.re ".") (re.range "0" "9") (re.range "A" "Z") (re.range "a" "z"))) ((_ re.loop 1 1) (re.union (re.range "0" "9") (re.range "A" "Z") (re.range "a" "z")))))))
; User-Agent\x3AUser-Agent\x3aURLencoderthis\x7CConnected
(assert (str.in.re X (str.to.re "User-Agent:User-Agent:URLencoderthis|Connected\x0a")))
; /^\/load\.php\?spl=[^&]+&b=[^&]+&o=[^&]+&i=/U
(assert (not (str.in.re X (re.++ (str.to.re "//load.php?spl=") (re.+ (re.comp (str.to.re "&"))) (str.to.re "&b=") (re.+ (re.comp (str.to.re "&"))) (str.to.re "&o=") (re.+ (re.comp (str.to.re "&"))) (str.to.re "&i=/U\x0a")))))
; \d+\s*[.'-]\s*\d+\s*[\d+.m\"]*
(assert (str.in.re X (re.++ (re.+ (re.range "0" "9")) (re.* (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))) (re.union (str.to.re ".") (str.to.re "'") (str.to.re "-")) (re.* (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))) (re.+ (re.range "0" "9")) (re.* (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))) (re.* (re.union (re.range "0" "9") (str.to.re "+") (str.to.re ".") (str.to.re "m") (str.to.re "\x22"))) (str.to.re "\x0a"))))
; [du]{2}|[gu]{2}|[tu]{2}|[ds]{2}|[gs]{2}|[da]{2}|[ga]{2}|[ta]{2}|[dq]{2}|[gq]{2}|[tq]{2}|[DU]{2}|[GU]{2}|[TU]{2}|[DS]{2}|[GS]{2}|[DA]{2}|[GA]{2}|[TA]{2}|[DQ]{2}|[GQ]{2}|[TQ]{2}
(assert (not (str.in.re X (re.union ((_ re.loop 2 2) (re.union (str.to.re "d") (str.to.re "u"))) ((_ re.loop 2 2) (re.union (str.to.re "g") (str.to.re "u"))) ((_ re.loop 2 2) (re.union (str.to.re "t") (str.to.re "u"))) ((_ re.loop 2 2) (re.union (str.to.re "d") (str.to.re "s"))) ((_ re.loop 2 2) (re.union (str.to.re "g") (str.to.re "s"))) ((_ re.loop 2 2) (re.union (str.to.re "d") (str.to.re "a"))) ((_ re.loop 2 2) (re.union (str.to.re "g") (str.to.re "a"))) ((_ re.loop 2 2) (re.union (str.to.re "t") (str.to.re "a"))) ((_ re.loop 2 2) (re.union (str.to.re "d") (str.to.re "q"))) ((_ re.loop 2 2) (re.union (str.to.re "g") (str.to.re "q"))) ((_ re.loop 2 2) (re.union (str.to.re "t") (str.to.re "q"))) ((_ re.loop 2 2) (re.union (str.to.re "D") (str.to.re "U"))) ((_ re.loop 2 2) (re.union (str.to.re "G") (str.to.re "U"))) ((_ re.loop 2 2) (re.union (str.to.re "T") (str.to.re "U"))) ((_ re.loop 2 2) (re.union (str.to.re "D") (str.to.re "S"))) ((_ re.loop 2 2) (re.union (str.to.re "G") (str.to.re "S"))) ((_ re.loop 2 2) (re.union (str.to.re "D") (str.to.re "A"))) ((_ re.loop 2 2) (re.union (str.to.re "G") (str.to.re "A"))) ((_ re.loop 2 2) (re.union (str.to.re "T") (str.to.re "A"))) ((_ re.loop 2 2) (re.union (str.to.re "D") (str.to.re "Q"))) ((_ re.loop 2 2) (re.union (str.to.re "G") (str.to.re "Q"))) (re.++ ((_ re.loop 2 2) (re.union (str.to.re "T") (str.to.re "Q"))) (str.to.re "\x0a"))))))
(check-sat)
