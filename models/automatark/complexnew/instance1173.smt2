(declare-const X String)
; <\s*/?\s*\w+(\s*\w+\s*=\s*(['"][^'"]*['"]|[\w#]+))*\s*/?\s*>
(assert (str.in.re X (re.++ (str.to.re "<") (re.* (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))) (re.opt (str.to.re "/")) (re.* (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))) (re.+ (re.union (re.range "0" "9") (re.range "A" "Z") (re.range "a" "z") (str.to.re "_"))) (re.* (re.++ (re.* (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))) (re.+ (re.union (re.range "0" "9") (re.range "A" "Z") (re.range "a" "z") (str.to.re "_"))) (re.* (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))) (str.to.re "=") (re.* (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))) (re.union (re.++ (re.union (str.to.re "'") (str.to.re "\x22")) (re.* (re.union (str.to.re "'") (str.to.re "\x22"))) (re.union (str.to.re "'") (str.to.re "\x22"))) (re.+ (re.union (str.to.re "#") (re.range "0" "9") (re.range "A" "Z") (re.range "a" "z") (str.to.re "_")))))) (re.* (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))) (re.opt (str.to.re "/")) (re.* (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))) (str.to.re ">\x0a"))))
; ^(sip|sips):.*\@((\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3})|([a-zA-Z\-\.]+\.[a-zA-Z]{2,5}))(:[\d]{1,5})?([\w\-?\@?\;?\,?\=\%\&]+)?
(assert (not (str.in.re X (re.++ (str.to.re "sips:") (re.* re.allchar) (str.to.re "@") (re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9")) re.allchar ((_ re.loop 1 3) (re.range "0" "9")) re.allchar ((_ re.loop 1 3) (re.range "0" "9")) re.allchar ((_ re.loop 1 3) (re.range "0" "9"))) (re.++ (re.+ (re.union (re.range "a" "z") (re.range "A" "Z") (str.to.re "-") (str.to.re "."))) (str.to.re ".") ((_ re.loop 2 5) (re.union (re.range "a" "z") (re.range "A" "Z"))))) (re.opt (re.++ (str.to.re ":") ((_ re.loop 1 5) (re.range "0" "9")))) (re.opt (re.+ (re.union (str.to.re "-") (str.to.re "?") (str.to.re "@") (str.to.re ";") (str.to.re ",") (str.to.re "=") (str.to.re "%") (str.to.re "&") (re.range "0" "9") (re.range "A" "Z") (re.range "a" "z") (str.to.re "_")))) (str.to.re "\x0a")))))
; /\x2f1020\d{6,16}$/U
(assert (not (str.in.re X (re.++ (str.to.re "//1020") ((_ re.loop 6 16) (re.range "0" "9")) (str.to.re "/U\x0a")))))
; ^[+-]? *(\$)? *((\d+)|(\d{1,3})(\,\d{3})*)(\.\d{0,2})?$
(assert (not (str.in.re X (re.++ (re.opt (re.union (str.to.re "+") (str.to.re "-"))) (re.* (str.to.re " ")) (re.opt (str.to.re "$")) (re.* (str.to.re " ")) (re.union (re.+ (re.range "0" "9")) (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.* (re.++ (str.to.re ",") ((_ re.loop 3 3) (re.range "0" "9")))))) (re.opt (re.++ (str.to.re ".") ((_ re.loop 0 2) (re.range "0" "9")))) (str.to.re "\x0a")))))
; qr/(Alabama|Alaska|Arizona|Arkansas|California|Colorado|Connecticut|Delaware|Florida|Georgia|Hawaii|Idaho|Illinois|Indiana|Iowa|Kansas|Kentucky|Louisiana|Maine|Maryland|Massachusetts|Michigan|Minnesota|Mississippi|Missouri|Montana|Nebraska|Nevada|New\sHampshire|New\sJersey|New\sMexico|New\sYork|North\sCarolina|North\sDakota|Ohio|Oklahoma|Oregon|Pennsylvania|Rhode\sIsland|South\sCarolina|South\sDakota|Tennessee|Texas|Utah|Vermont|Virginia|Washington|West\sVirginia|Wisconsin|Wyoming)/
(assert (not (str.in.re X (re.++ (str.to.re "qr/") (re.union (str.to.re "Alabama") (str.to.re "Alaska") (str.to.re "Arizona") (str.to.re "Arkansas") (str.to.re "California") (str.to.re "Colorado") (str.to.re "Connecticut") (str.to.re "Delaware") (str.to.re "Florida") (str.to.re "Georgia") (str.to.re "Hawaii") (str.to.re "Idaho") (str.to.re "Illinois") (str.to.re "Indiana") (str.to.re "Iowa") (str.to.re "Kansas") (str.to.re "Kentucky") (str.to.re "Louisiana") (str.to.re "Maine") (str.to.re "Maryland") (str.to.re "Massachusetts") (str.to.re "Michigan") (str.to.re "Minnesota") (str.to.re "Mississippi") (str.to.re "Missouri") (str.to.re "Montana") (str.to.re "Nebraska") (str.to.re "Nevada") (re.++ (str.to.re "New") (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d")) (str.to.re "Hampshire")) (re.++ (str.to.re "New") (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d")) (str.to.re "Jersey")) (re.++ (str.to.re "New") (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d")) (str.to.re "Mexico")) (re.++ (str.to.re "New") (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d")) (str.to.re "York")) (re.++ (str.to.re "North") (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d")) (str.to.re "Carolina")) (re.++ (str.to.re "North") (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d")) (str.to.re "Dakota")) (str.to.re "Ohio") (str.to.re "Oklahoma") (str.to.re "Oregon") (str.to.re "Pennsylvania") (re.++ (str.to.re "Rhode") (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d")) (str.to.re "Island")) (re.++ (str.to.re "South") (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d")) (str.to.re "Carolina")) (re.++ (str.to.re "South") (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d")) (str.to.re "Dakota")) (str.to.re "Tennessee") (str.to.re "Texas") (str.to.re "Utah") (str.to.re "Vermont") (str.to.re "Virginia") (str.to.re "Washington") (re.++ (str.to.re "West") (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d")) (str.to.re "Virginia")) (str.to.re "Wisconsin") (str.to.re "Wyoming")) (str.to.re "/\x0a")))))
(check-sat)
