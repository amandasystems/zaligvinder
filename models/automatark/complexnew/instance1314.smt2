(declare-const X String)
; (\A|\s)(((>[:;=+])|[>:;=+])[,*]?[-~+o]?(\)+|\(+|\}+|\{+|\]+|\[+|\|+|\\+|/+|>+|<+|D+|[@#!OoPpXxZS$03])|>?[xX8][-~+o]?(\)+|\(+|\}+|\{+|\]+|\[+|\|+|\\+|/+|>+|<+|D+))(\Z|\s)
(assert (not (str.in.re X (re.++ (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d")) (re.union (re.++ (re.union (re.++ (str.to.re ">") (re.union (str.to.re ":") (str.to.re ";") (str.to.re "=") (str.to.re "+"))) (str.to.re ">") (str.to.re ":") (str.to.re ";") (str.to.re "=") (str.to.re "+")) (re.opt (re.union (str.to.re ",") (str.to.re "*"))) (re.opt (re.union (str.to.re "-") (str.to.re "~") (str.to.re "+") (str.to.re "o"))) (re.union (re.+ (str.to.re ")")) (re.+ (str.to.re "(")) (re.+ (str.to.re "}")) (re.+ (str.to.re "{")) (re.+ (str.to.re "]")) (re.+ (str.to.re "[")) (re.+ (str.to.re "|")) (re.+ (str.to.re "\x5c")) (re.+ (str.to.re "/")) (re.+ (str.to.re ">")) (re.+ (str.to.re "<")) (re.+ (str.to.re "D")) (str.to.re "@") (str.to.re "#") (str.to.re "!") (str.to.re "O") (str.to.re "o") (str.to.re "P") (str.to.re "p") (str.to.re "X") (str.to.re "x") (str.to.re "Z") (str.to.re "S") (str.to.re "$") (str.to.re "0") (str.to.re "3"))) (re.++ (re.opt (str.to.re ">")) (re.union (str.to.re "x") (str.to.re "X") (str.to.re "8")) (re.opt (re.union (str.to.re "-") (str.to.re "~") (str.to.re "+") (str.to.re "o"))) (re.union (re.+ (str.to.re ")")) (re.+ (str.to.re "(")) (re.+ (str.to.re "}")) (re.+ (str.to.re "{")) (re.+ (str.to.re "]")) (re.+ (str.to.re "[")) (re.+ (str.to.re "|")) (re.+ (str.to.re "\x5c")) (re.+ (str.to.re "/")) (re.+ (str.to.re ">")) (re.+ (str.to.re "<")) (re.+ (str.to.re "D"))))) (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d")) (str.to.re "\x0a")))))
; ^([0-1][0-9]|[2][0-3]):([0-5][0-9])$
(assert (str.in.re X (re.++ (re.union (re.++ (re.range "0" "1") (re.range "0" "9")) (re.++ (str.to.re "2") (re.range "0" "3"))) (str.to.re ":\x0a") (re.range "0" "5") (re.range "0" "9"))))
; /[A-F0-9]{8}(-[A-F0-9]{4}){3}-[A-F0-9]{12}.wipe$/Ui
(assert (not (str.in.re X (re.++ (str.to.re "/") ((_ re.loop 8 8) (re.union (re.range "A" "F") (re.range "0" "9"))) ((_ re.loop 3 3) (re.++ (str.to.re "-") ((_ re.loop 4 4) (re.union (re.range "A" "F") (re.range "0" "9"))))) (str.to.re "-") ((_ re.loop 12 12) (re.union (re.range "A" "F") (re.range "0" "9"))) re.allchar (str.to.re "wipe/Ui\x0a")))))
; /\x2f\x3fdp\x3d[A-Z0-9]{50}&cb\x3d[0-9]{9}/Ui
(assert (str.in.re X (re.++ (str.to.re "//?dp=") ((_ re.loop 50 50) (re.union (re.range "A" "Z") (re.range "0" "9"))) (str.to.re "&cb=") ((_ re.loop 9 9) (re.range "0" "9")) (str.to.re "/Ui\x0a"))))
(check-sat)
