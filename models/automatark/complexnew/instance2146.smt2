(declare-const X String)
; ClientsConnected-\d+online-casino-searcher\.com\s+Warezxmlns\x3A
(assert (not (str.in.re X (re.++ (str.to.re "ClientsConnected-") (re.+ (re.range "0" "9")) (str.to.re "online-casino-searcher.com") (re.+ (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))) (str.to.re "Warezxmlns:\x0a")))))
; ^([A-Z0-9]{5})$
(assert (str.in.re X (re.++ ((_ re.loop 5 5) (re.union (re.range "A" "Z") (re.range "0" "9"))) (str.to.re "\x0a"))))
; /PRIVMSG #new :\x02\x5b(GOOGLE|SCAN)\x5d\x02\x20Scanning/
(assert (not (str.in.re X (re.++ (str.to.re "/PRIVMSG #new :\x02[") (re.union (str.to.re "GOOGLE") (str.to.re "SCAN")) (str.to.re "]\x02 Scanning/\x0a")))))
; \b([Jj](([Aa][Nn][Uu][Aa][Rr][Yy]|[Aa][Nn])|([Uu][Nn][Ee]|[Uu][Nn])|([Uu][Ll][Yy]|[Uu][Ll])))\b|\b((([Ss][Ee][Pp][Tt]|[Nn][Oo][Vv]|[Dd][Ee][Cc])[Ee][Mm])|[Oo][Cc][Tt][Oo])[Bb][Ee][Rr]|([Ss][Ee][Pp]|[Nn][Oo][Vv]|[Dd][Ee][Cc]|[Oo][Cc][Tt])\b|\b([Mm][Aa]([Yy]|([Rr][Cc][Hh]|[Rr])))\b|\b[Aa](([Pp][Rr][Ii][Ll]|[Pp][Rr])|([Uu][Gg][Uu][Ss][Tt]|[Uu][Gg]))\b|\b[Ff]([Ee][Bb][Rr][Uu][Aa][Rr][Yy]|[Ee][Bb])\b
(assert (not (str.in.re X (re.union (re.++ (re.union (str.to.re "J") (str.to.re "j")) (re.union (re.++ (re.union (str.to.re "A") (str.to.re "a")) (re.union (str.to.re "N") (str.to.re "n")) (re.union (str.to.re "U") (str.to.re "u")) (re.union (str.to.re "A") (str.to.re "a")) (re.union (str.to.re "R") (str.to.re "r")) (re.union (str.to.re "Y") (str.to.re "y"))) (re.++ (re.union (str.to.re "U") (str.to.re "u")) (re.union (str.to.re "N") (str.to.re "n")) (re.union (str.to.re "E") (str.to.re "e"))) (re.++ (re.union (str.to.re "U") (str.to.re "u")) (re.union (str.to.re "L") (str.to.re "l")) (re.union (str.to.re "Y") (str.to.re "y"))))) (re.++ (re.union (re.++ (re.union (re.++ (re.union (str.to.re "S") (str.to.re "s")) (re.union (str.to.re "E") (str.to.re "e")) (re.union (str.to.re "P") (str.to.re "p")) (re.union (str.to.re "T") (str.to.re "t"))) (re.++ (re.union (str.to.re "N") (str.to.re "n")) (re.union (str.to.re "O") (str.to.re "o")) (re.union (str.to.re "V") (str.to.re "v"))) (re.++ (re.union (str.to.re "D") (str.to.re "d")) (re.union (str.to.re "E") (str.to.re "e")) (re.union (str.to.re "C") (str.to.re "c")))) (re.union (str.to.re "E") (str.to.re "e")) (re.union (str.to.re "M") (str.to.re "m"))) (re.++ (re.union (str.to.re "O") (str.to.re "o")) (re.union (str.to.re "C") (str.to.re "c")) (re.union (str.to.re "T") (str.to.re "t")) (re.union (str.to.re "O") (str.to.re "o")))) (re.union (str.to.re "B") (str.to.re "b")) (re.union (str.to.re "E") (str.to.re "e")) (re.union (str.to.re "R") (str.to.re "r"))) (re.++ (re.union (str.to.re "M") (str.to.re "m")) (re.union (str.to.re "A") (str.to.re "a")) (re.union (re.++ (re.union (str.to.re "R") (str.to.re "r")) (re.union (str.to.re "C") (str.to.re "c")) (re.union (str.to.re "H") (str.to.re "h"))) (str.to.re "Y") (str.to.re "y"))) (re.++ (re.union (str.to.re "A") (str.to.re "a")) (re.union (re.++ (re.union (str.to.re "P") (str.to.re "p")) (re.union (str.to.re "R") (str.to.re "r")) (re.union (str.to.re "I") (str.to.re "i")) (re.union (str.to.re "L") (str.to.re "l"))) (re.++ (re.union (str.to.re "U") (str.to.re "u")) (re.union (str.to.re "G") (str.to.re "g")) (re.union (str.to.re "U") (str.to.re "u")) (re.union (str.to.re "S") (str.to.re "s")) (re.union (str.to.re "T") (str.to.re "t"))))) (re.++ (re.union (str.to.re "F") (str.to.re "f")) (str.to.re "\x0a") (re.union (str.to.re "E") (str.to.re "e")) (re.union (str.to.re "B") (str.to.re "b")) (re.union (str.to.re "R") (str.to.re "r")) (re.union (str.to.re "U") (str.to.re "u")) (re.union (str.to.re "A") (str.to.re "a")) (re.union (str.to.re "R") (str.to.re "r")) (re.union (str.to.re "Y") (str.to.re "y"))) (re.++ (re.union (str.to.re "S") (str.to.re "s")) (re.union (str.to.re "E") (str.to.re "e")) (re.union (str.to.re "P") (str.to.re "p"))) (re.++ (re.union (str.to.re "N") (str.to.re "n")) (re.union (str.to.re "O") (str.to.re "o")) (re.union (str.to.re "V") (str.to.re "v"))) (re.++ (re.union (str.to.re "D") (str.to.re "d")) (re.union (str.to.re "E") (str.to.re "e")) (re.union (str.to.re "C") (str.to.re "c"))) (re.++ (re.union (str.to.re "O") (str.to.re "o")) (re.union (str.to.re "C") (str.to.re "c")) (re.union (str.to.re "T") (str.to.re "t")))))))
; \d{1,2}d \d{1,2}h
(assert (not (str.in.re X (re.++ ((_ re.loop 1 2) (re.range "0" "9")) (str.to.re "d ") ((_ re.loop 1 2) (re.range "0" "9")) (str.to.re "h\x0a")))))
(check-sat)
