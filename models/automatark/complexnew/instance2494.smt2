(declare-const X String)
; \b[P|p]*(OST|ost)*\.*\s*[O|o|0]*(ffice|FFICE)*\.*\s*[B|b][O|o|0][X|x]\b
(assert (not (str.in.re X (re.++ (re.* (re.union (str.to.re "P") (str.to.re "|") (str.to.re "p"))) (re.* (re.union (str.to.re "OST") (str.to.re "ost"))) (re.* (str.to.re ".")) (re.* (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))) (re.* (re.union (str.to.re "O") (str.to.re "|") (str.to.re "o") (str.to.re "0"))) (re.* (re.union (str.to.re "ffice") (str.to.re "FFICE"))) (re.* (str.to.re ".")) (re.* (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))) (re.union (str.to.re "B") (str.to.re "|") (str.to.re "b")) (re.union (str.to.re "O") (str.to.re "|") (str.to.re "o") (str.to.re "0")) (re.union (str.to.re "X") (str.to.re "|") (str.to.re "x")) (str.to.re "\x0a")))))
; (</?\w*[^<>]*>)
(assert (str.in.re X (re.++ (str.to.re "\x0a<") (re.opt (str.to.re "/")) (re.* (re.union (re.range "0" "9") (re.range "A" "Z") (re.range "a" "z") (str.to.re "_"))) (re.* (re.union (str.to.re "<") (str.to.re ">"))) (str.to.re ">"))))
; ((([sS]|[nN])[a-hA-Hj-zJ-Z])|(([tT]|[oO])[abfglmqrvwABFGLMQRVW])|([hH][l-zL-Z])|([jJ][lmqrvwLMQRVW]))([0-9]{2})?(([a-np-zA-NP-Z]{1}?|([0-9]{2})?([0-9]{2})?([0-9]{2})?([0-9]{2})?))
(assert (not (str.in.re X (re.++ (re.union (re.++ (re.union (str.to.re "s") (str.to.re "S") (str.to.re "n") (str.to.re "N")) (re.union (re.range "a" "h") (re.range "A" "H") (re.range "j" "z") (re.range "J" "Z"))) (re.++ (re.union (str.to.re "t") (str.to.re "T") (str.to.re "o") (str.to.re "O")) (re.union (str.to.re "a") (str.to.re "b") (str.to.re "f") (str.to.re "g") (str.to.re "l") (str.to.re "m") (str.to.re "q") (str.to.re "r") (str.to.re "v") (str.to.re "w") (str.to.re "A") (str.to.re "B") (str.to.re "F") (str.to.re "G") (str.to.re "L") (str.to.re "M") (str.to.re "Q") (str.to.re "R") (str.to.re "V") (str.to.re "W"))) (re.++ (re.union (str.to.re "h") (str.to.re "H")) (re.union (re.range "l" "z") (re.range "L" "Z"))) (re.++ (re.union (str.to.re "j") (str.to.re "J")) (re.union (str.to.re "l") (str.to.re "m") (str.to.re "q") (str.to.re "r") (str.to.re "v") (str.to.re "w") (str.to.re "L") (str.to.re "M") (str.to.re "Q") (str.to.re "R") (str.to.re "V") (str.to.re "W")))) (re.opt ((_ re.loop 2 2) (re.range "0" "9"))) (re.union ((_ re.loop 1 1) (re.union (re.range "a" "n") (re.range "p" "z") (re.range "A" "N") (re.range "P" "Z"))) (re.++ (re.opt ((_ re.loop 2 2) (re.range "0" "9"))) (re.opt ((_ re.loop 2 2) (re.range "0" "9"))) (re.opt ((_ re.loop 2 2) (re.range "0" "9"))) (re.opt ((_ re.loop 2 2) (re.range "0" "9"))))) (str.to.re "\x0a")))))
; ([A-Za-z0-9]+:\/\/)?([a-zA-Z0-9]+(\.[a-zA-Z0-9]+)*)?(\/|(\/([A-Za-z0-9\:@!\$&'\(\}\*\+\-_,;=~\.]+|(%[A-F0-9]{2})+))*)(\?[A-Za-z0-9]+=[A-Za-z0-9]+(&[A-Za-z0-9]+=[A-Za-z0-9]+)*)?
(assert (not (str.in.re X (re.++ (re.opt (re.++ (re.+ (re.union (re.range "A" "Z") (re.range "a" "z") (re.range "0" "9"))) (str.to.re "://"))) (re.opt (re.++ (re.+ (re.union (re.range "a" "z") (re.range "A" "Z") (re.range "0" "9"))) (re.* (re.++ (str.to.re ".") (re.+ (re.union (re.range "a" "z") (re.range "A" "Z") (re.range "0" "9"))))))) (re.union (str.to.re "/") (re.* (re.++ (str.to.re "/") (re.union (re.+ (re.union (re.range "A" "Z") (re.range "a" "z") (re.range "0" "9") (str.to.re ":") (str.to.re "@") (str.to.re "!") (str.to.re "$") (str.to.re "&") (str.to.re "'") (str.to.re "(") (str.to.re "}") (str.to.re "*") (str.to.re "+") (str.to.re "-") (str.to.re "_") (str.to.re ",") (str.to.re ";") (str.to.re "=") (str.to.re "~") (str.to.re "."))) (re.+ (re.++ (str.to.re "%") ((_ re.loop 2 2) (re.union (re.range "A" "F") (re.range "0" "9"))))))))) (re.opt (re.++ (str.to.re "?") (re.+ (re.union (re.range "A" "Z") (re.range "a" "z") (re.range "0" "9"))) (str.to.re "=") (re.+ (re.union (re.range "A" "Z") (re.range "a" "z") (re.range "0" "9"))) (re.* (re.++ (str.to.re "&") (re.+ (re.union (re.range "A" "Z") (re.range "a" "z") (re.range "0" "9"))) (str.to.re "=") (re.+ (re.union (re.range "A" "Z") (re.range "a" "z") (re.range "0" "9"))))))) (str.to.re "\x0a")))))
; ^\s*
(assert (str.in.re X (re.++ (re.* (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))) (str.to.re "\x0a"))))
(check-sat)
