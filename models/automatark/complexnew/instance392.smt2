(declare-const X String)
; ^((l((ll)|(b)|(bb)|(bbb)))|(bb*))$
(assert (str.in.re X (re.++ (re.union (re.++ (str.to.re "l") (re.union (str.to.re "ll") (str.to.re "b") (str.to.re "bb") (str.to.re "bbb"))) (re.++ (str.to.re "b") (re.* (str.to.re "b")))) (str.to.re "\x0a"))))
; ^((([\+][\s]{0,1})|([0]{2}[\s-]{0,1}))([358]{3})([\s-]{0,1})|([0]{1}))(([1-9]{1}[0-9]{0,1})([\s-]{0,1})([0-9]{2,4})([\s-]{0,1})([0-9]{2,4})([\s-]{0,1}))([0-9]{0,3}){1}$
(assert (str.in.re X (re.++ (re.union (re.++ (re.union (re.++ (str.to.re "+") (re.opt (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d")))) (re.++ ((_ re.loop 2 2) (str.to.re "0")) (re.opt (re.union (str.to.re "-") (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))))) ((_ re.loop 3 3) (re.union (str.to.re "3") (str.to.re "5") (str.to.re "8"))) (re.opt (re.union (str.to.re "-") (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d")))) ((_ re.loop 1 1) (str.to.re "0"))) ((_ re.loop 1 1) ((_ re.loop 0 3) (re.range "0" "9"))) (str.to.re "\x0a") (re.opt (re.union (str.to.re "-") (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))) ((_ re.loop 2 4) (re.range "0" "9")) (re.opt (re.union (str.to.re "-") (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))) ((_ re.loop 2 4) (re.range "0" "9")) (re.opt (re.union (str.to.re "-") (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))) ((_ re.loop 1 1) (re.range "1" "9")) (re.opt (re.range "0" "9")))))
; ((EQD[^']*')(RFF[^']*'){0,9}(EQN[^']*')?(TMD[^']*'){0,9}(DTM[^']*'){0,9}(LOC[^']*'){0,9}(MEA[^']*'){0,9}(DIM[^']*'){0,9}(TMP[^']*'){0,9}(RNG[^']*'){0,9}(SEL[^']*'){0,9}(FTX[^']*'){0,9}(DGS[^']*'){0,9}(EQA[^']*'){0,9}(NAD[^']*')?)((TDT[^']*')(RFF[^']*'){0,9}(LOC[^']*'){0,9}(DTM[^']*'){0,9})?
(assert (not (str.in.re X (re.++ (re.opt (re.++ ((_ re.loop 0 9) (re.++ (str.to.re "RFF") (re.* (re.comp (str.to.re "'"))) (str.to.re "'"))) ((_ re.loop 0 9) (re.++ (str.to.re "LOC") (re.* (re.comp (str.to.re "'"))) (str.to.re "'"))) ((_ re.loop 0 9) (re.++ (str.to.re "DTM") (re.* (re.comp (str.to.re "'"))) (str.to.re "'"))) (str.to.re "TDT") (re.* (re.comp (str.to.re "'"))) (str.to.re "'"))) (str.to.re "\x0a") ((_ re.loop 0 9) (re.++ (str.to.re "RFF") (re.* (re.comp (str.to.re "'"))) (str.to.re "'"))) (re.opt (re.++ (str.to.re "EQN") (re.* (re.comp (str.to.re "'"))) (str.to.re "'"))) ((_ re.loop 0 9) (re.++ (str.to.re "TMD") (re.* (re.comp (str.to.re "'"))) (str.to.re "'"))) ((_ re.loop 0 9) (re.++ (str.to.re "DTM") (re.* (re.comp (str.to.re "'"))) (str.to.re "'"))) ((_ re.loop 0 9) (re.++ (str.to.re "LOC") (re.* (re.comp (str.to.re "'"))) (str.to.re "'"))) ((_ re.loop 0 9) (re.++ (str.to.re "MEA") (re.* (re.comp (str.to.re "'"))) (str.to.re "'"))) ((_ re.loop 0 9) (re.++ (str.to.re "DIM") (re.* (re.comp (str.to.re "'"))) (str.to.re "'"))) ((_ re.loop 0 9) (re.++ (str.to.re "TMP") (re.* (re.comp (str.to.re "'"))) (str.to.re "'"))) ((_ re.loop 0 9) (re.++ (str.to.re "RNG") (re.* (re.comp (str.to.re "'"))) (str.to.re "'"))) ((_ re.loop 0 9) (re.++ (str.to.re "SEL") (re.* (re.comp (str.to.re "'"))) (str.to.re "'"))) ((_ re.loop 0 9) (re.++ (str.to.re "FTX") (re.* (re.comp (str.to.re "'"))) (str.to.re "'"))) ((_ re.loop 0 9) (re.++ (str.to.re "DGS") (re.* (re.comp (str.to.re "'"))) (str.to.re "'"))) ((_ re.loop 0 9) (re.++ (str.to.re "EQA") (re.* (re.comp (str.to.re "'"))) (str.to.re "'"))) (re.opt (re.++ (str.to.re "NAD") (re.* (re.comp (str.to.re "'"))) (str.to.re "'"))) (str.to.re "EQD") (re.* (re.comp (str.to.re "'"))) (str.to.re "'")))))
; ([\d]{4}[ |-]?){2}([\d]{11}[ |-]?)([\d]{2})
(assert (not (str.in.re X (re.++ ((_ re.loop 2 2) (re.++ ((_ re.loop 4 4) (re.range "0" "9")) (re.opt (re.union (str.to.re " ") (str.to.re "|") (str.to.re "-"))))) ((_ re.loop 2 2) (re.range "0" "9")) (str.to.re "\x0a") ((_ re.loop 11 11) (re.range "0" "9")) (re.opt (re.union (str.to.re " ") (str.to.re "|") (str.to.re "-")))))))
; /filename=[^\n]*\x2eram/i
(assert (not (str.in.re X (re.++ (str.to.re "/filename=") (re.* (re.comp (str.to.re "\x0a"))) (str.to.re ".ram/i\x0a")))))
(check-sat)
