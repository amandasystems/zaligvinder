(declare-const X String)
; /^[-+]?[1-9](\d*|((\d{1,2})?,(\d{3},)*(\d{3})))?([eE][-+]\d+)?$/
(assert (str.in.re X (re.++ (str.to.re "/") (re.opt (re.union (str.to.re "-") (str.to.re "+"))) (re.range "1" "9") (re.opt (re.union (re.* (re.range "0" "9")) (re.++ (re.opt ((_ re.loop 1 2) (re.range "0" "9"))) (str.to.re ",") (re.* (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (str.to.re ","))) ((_ re.loop 3 3) (re.range "0" "9"))))) (re.opt (re.++ (re.union (str.to.re "e") (str.to.re "E")) (re.union (str.to.re "-") (str.to.re "+")) (re.+ (re.range "0" "9")))) (str.to.re "/\x0a"))))
; ^((\+){1}[1-9]{1}[0-9]{0,1}[0-9]{0,1}(\s){1}[\(]{1}[1-9]{1}[0-9]{1,5}[\)]{1}[\s]{1})[1-9]{1}[0-9]{4,9}$
(assert (not (str.in.re X (re.++ ((_ re.loop 1 1) (re.range "1" "9")) ((_ re.loop 4 9) (re.range "0" "9")) (str.to.re "\x0a") ((_ re.loop 1 1) (str.to.re "+")) ((_ re.loop 1 1) (re.range "1" "9")) (re.opt (re.range "0" "9")) (re.opt (re.range "0" "9")) ((_ re.loop 1 1) (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))) ((_ re.loop 1 1) (str.to.re "(")) ((_ re.loop 1 1) (re.range "1" "9")) ((_ re.loop 1 5) (re.range "0" "9")) ((_ re.loop 1 1) (str.to.re ")")) ((_ re.loop 1 1) (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d")))))))
; /z\d{1,3}/Pi
(assert (not (str.in.re X (re.++ (str.to.re "/z") ((_ re.loop 1 3) (re.range "0" "9")) (str.to.re "/Pi\x0a")))))
; /\/DES\d+O\d+\.jsp\?[a-z0-9=\x2b\x2f]{20}/iU
(assert (not (str.in.re X (re.++ (str.to.re "//DES") (re.+ (re.range "0" "9")) (str.to.re "O") (re.+ (re.range "0" "9")) (str.to.re ".jsp?") ((_ re.loop 20 20) (re.union (re.range "a" "z") (re.range "0" "9") (str.to.re "=") (str.to.re "+") (str.to.re "/"))) (str.to.re "/iU\x0a")))))
; (http):\\/\\/[\\w\\-_]+(\\.[\\w\\-_]+)+(\\.[\\w\\-_]+)(\\/)([\\w\\-\\.,@?^=%&:/~\\+#]*[\\w\\-\\@?^=%&/~\\+#]+)(\\/)((\\d{8}-)|(\\d{9}-)|(\\d{10}-)|(\\d{11}-))+([\\w\\-\\.,@?^=%&:/~\\+#]*[\\w\\-\\@?+html^])?
(assert (str.in.re X (re.++ (str.to.re "http:\x5c/\x5c/") (re.+ (re.union (str.to.re "\x5c") (str.to.re "w") (re.range "\x5c" "_"))) (re.+ (re.++ (str.to.re "\x5c") re.allchar (re.+ (re.union (str.to.re "\x5c") (str.to.re "w") (re.range "\x5c" "_"))))) (str.to.re "\x5c/\x5c/") (re.+ (re.union (re.++ (str.to.re "\x5c") ((_ re.loop 8 8) (str.to.re "d")) (str.to.re "-")) (re.++ (str.to.re "\x5c") ((_ re.loop 9 9) (str.to.re "d")) (str.to.re "-")) (re.++ (str.to.re "\x5c") ((_ re.loop 10 10) (str.to.re "d")) (str.to.re "-")) (re.++ (str.to.re "\x5c") ((_ re.loop 11 11) (str.to.re "d")) (str.to.re "-")))) (re.opt (re.++ (re.* (re.union (str.to.re "\x5c") (str.to.re "w") (re.range "\x5c" "\x5c") (str.to.re ".") (str.to.re ",") (str.to.re "@") (str.to.re "?") (str.to.re "^") (str.to.re "=") (str.to.re "%") (str.to.re "&") (str.to.re ":") (str.to.re "/") (str.to.re "~") (str.to.re "+") (str.to.re "#"))) (re.union (str.to.re "\x5c") (str.to.re "w") (re.range "\x5c" "\x5c") (str.to.re "@") (str.to.re "?") (str.to.re "+") (str.to.re "h") (str.to.re "t") (str.to.re "m") (str.to.re "l") (str.to.re "^")))) (str.to.re "\x0a\x5c") re.allchar (re.+ (re.union (str.to.re "\x5c") (str.to.re "w") (re.range "\x5c" "_"))) (re.* (re.union (str.to.re "\x5c") (str.to.re "w") (re.range "\x5c" "\x5c") (str.to.re ".") (str.to.re ",") (str.to.re "@") (str.to.re "?") (str.to.re "^") (str.to.re "=") (str.to.re "%") (str.to.re "&") (str.to.re ":") (str.to.re "/") (str.to.re "~") (str.to.re "+") (str.to.re "#"))) (re.+ (re.union (str.to.re "\x5c") (str.to.re "w") (re.range "\x5c" "\x5c") (str.to.re "@") (str.to.re "?") (str.to.re "^") (str.to.re "=") (str.to.re "%") (str.to.re "&") (str.to.re "/") (str.to.re "~") (str.to.re "+") (str.to.re "#"))))))
(check-sat)
