(declare-const X String)
; (\*\*)(.+)(\*\*)
(assert (not (str.in.re X (re.++ (str.to.re "**") (re.+ re.allchar) (str.to.re "**\x0a")))))
; port\d+\.compress\s+aresflashdownloader\x2Ecomv\x2Edll\x3F\[DRIVEHost\x3A\xb0\xae\xb6\xf9\xcd\xf8\xb5\xc1
(assert (not (str.in.re X (re.++ (str.to.re "port") (re.+ (re.range "0" "9")) (str.to.re ".compress") (re.+ (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))) (str.to.re "aresflashdownloader.comv.dll?[DRIVEHost:\xb0\xae\xb6\xf9\xcd\xf8\xb5\xc1\x0a")))))
; SpyBuddySubject\x3Astats\x2edrivecleaner\x2ecom
(assert (not (str.in.re X (str.to.re "SpyBuddySubject:stats.drivecleaner.com\x13\x0a"))))
; \b(((((one|t((en)|(wo)|(hree)|(welve)|(hirteen))|(evelen)|(f((our)|(ive))|s((ix)|(even))|eight|nine)(teen)?))\b(\s+hundred\s*)?)| ((t((wen)|(hir))|f((or)|(if))|s((ix)|(even))|eigh|nin)ty)(-(one|t((wo)|(hree))|f((our)|(ive))|s((ix)|(even))|eight|nine))?) (\s*(hundred|thousand|((([mb]|(t|quad)r))illion))\s*(and\s+)?)?)+
(assert (not (str.in.re X (re.++ (re.+ (re.++ (re.union (re.++ (re.union (str.to.re "one") (re.++ (str.to.re "t") (re.union (str.to.re "en") (str.to.re "wo") (str.to.re "hree") (str.to.re "welve") (str.to.re "hirteen"))) (str.to.re "evelen") (re.++ (re.union (re.++ (str.to.re "f") (re.union (str.to.re "our") (str.to.re "ive"))) (re.++ (str.to.re "s") (re.union (str.to.re "ix") (str.to.re "even"))) (str.to.re "eight") (str.to.re "nine")) (re.opt (str.to.re "teen")))) (re.opt (re.++ (re.+ (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))) (str.to.re "hundred") (re.* (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d")))))) (re.++ (str.to.re " ") (re.opt (re.++ (str.to.re "-") (re.union (str.to.re "one") (re.++ (str.to.re "t") (re.union (str.to.re "wo") (str.to.re "hree"))) (re.++ (str.to.re "f") (re.union (str.to.re "our") (str.to.re "ive"))) (re.++ (str.to.re "s") (re.union (str.to.re "ix") (str.to.re "even"))) (str.to.re "eight") (str.to.re "nine")))) (re.union (re.++ (str.to.re "t") (re.union (str.to.re "wen") (str.to.re "hir"))) (re.++ (str.to.re "f") (re.union (str.to.re "or") (str.to.re "if"))) (re.++ (str.to.re "s") (re.union (str.to.re "ix") (str.to.re "even"))) (str.to.re "eigh") (str.to.re "nin")) (str.to.re "ty"))) (str.to.re " ") (re.opt (re.++ (re.* (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))) (re.union (str.to.re "hundred") (str.to.re "thousand") (re.++ (re.union (re.++ (re.union (str.to.re "t") (str.to.re "quad")) (str.to.re "r")) (str.to.re "m") (str.to.re "b")) (str.to.re "illion"))) (re.* (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))) (re.opt (re.++ (str.to.re "and") (re.+ (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))))))))) (str.to.re "\x0a")))))
; \x2Fta\x2FNEWS\x2Fpassword\x3B1\x3BOptix
(assert (not (str.in.re X (str.to.re "/ta/NEWS/password;1;Optix\x0a"))))
(check-sat)
