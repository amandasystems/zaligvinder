(declare-const X String)
; ^(((((\+)?(\s)?(\d{2,4}))(\s)?((\(0\))?)(\s)?|0)(\s|\-)?)(\s|\d{2})(\s|\-)?)?(\d{3})(\s|\-)?(\d{2})(\s|\-)?(\d{2})
(assert (not (str.in.re X (re.++ (re.opt (re.++ (re.union ((_ re.loop 2 2) (re.range "0" "9")) (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d")) (re.opt (re.union (str.to.re "-") (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))) (re.union (re.++ (re.opt (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))) (re.opt (str.to.re "(0)")) (re.opt (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))) (re.opt (str.to.re "+")) (re.opt (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))) ((_ re.loop 2 4) (re.range "0" "9"))) (str.to.re "0")) (re.opt (re.union (str.to.re "-") (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))))) ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.union (str.to.re "-") (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))) ((_ re.loop 2 2) (re.range "0" "9")) (re.opt (re.union (str.to.re "-") (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))) ((_ re.loop 2 2) (re.range "0" "9")) (str.to.re "\x0a")))))
; \.exe\s+ZC-Bridge\s+TPSystemHost\x3AHost\x3a
(assert (not (str.in.re X (re.++ (str.to.re ".exe") (re.+ (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))) (str.to.re "ZC-Bridge") (re.+ (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))) (str.to.re "TPSystemHost:Host:\x0a")))))
; ^(00[1-9]|0[1-9][0-9]|[1-7][0-9][0-9]|7[0-7][0-2]|77[0-2])(\d{6})(A|B([1-9]?|[ADGHJKLNPQRTWY])|C([1-9]|[A-Z])|D([1-9]?|[ACDGHJKLMNPQRSTVWXYZ])|E([1-9]?|[ABCDFGHJKM])|F([1-8])|J([1-4])|K([1-9]|[ABCDEFGHJLM])|T([ABCDEFGHJKLMNPQRSTUVWXYZ2]?)|M|W([1-9]?|[BCFGJRT]))$
(assert (not (str.in.re X (re.++ (re.union (re.++ (str.to.re "00") (re.range "1" "9")) (re.++ (str.to.re "0") (re.range "1" "9") (re.range "0" "9")) (re.++ (re.range "1" "7") (re.range "0" "9") (re.range "0" "9")) (re.++ (str.to.re "7") (re.range "0" "7") (re.range "0" "2")) (re.++ (str.to.re "77") (re.range "0" "2"))) ((_ re.loop 6 6) (re.range "0" "9")) (re.union (str.to.re "A") (re.++ (str.to.re "B") (re.union (re.opt (re.range "1" "9")) (str.to.re "A") (str.to.re "D") (str.to.re "G") (str.to.re "H") (str.to.re "J") (str.to.re "K") (str.to.re "L") (str.to.re "N") (str.to.re "P") (str.to.re "Q") (str.to.re "R") (str.to.re "T") (str.to.re "W") (str.to.re "Y"))) (re.++ (str.to.re "C") (re.union (re.range "1" "9") (re.range "A" "Z"))) (re.++ (str.to.re "D") (re.union (re.opt (re.range "1" "9")) (str.to.re "A") (str.to.re "C") (str.to.re "D") (str.to.re "G") (str.to.re "H") (str.to.re "J") (str.to.re "K") (str.to.re "L") (str.to.re "M") (str.to.re "N") (str.to.re "P") (str.to.re "Q") (str.to.re "R") (str.to.re "S") (str.to.re "T") (str.to.re "V") (str.to.re "W") (str.to.re "X") (str.to.re "Y") (str.to.re "Z"))) (re.++ (str.to.re "E") (re.union (re.opt (re.range "1" "9")) (str.to.re "A") (str.to.re "B") (str.to.re "C") (str.to.re "D") (str.to.re "F") (str.to.re "G") (str.to.re "H") (str.to.re "J") (str.to.re "K") (str.to.re "M"))) (re.++ (str.to.re "F") (re.range "1" "8")) (re.++ (str.to.re "J") (re.range "1" "4")) (re.++ (str.to.re "K") (re.union (re.range "1" "9") (str.to.re "A") (str.to.re "B") (str.to.re "C") (str.to.re "D") (str.to.re "E") (str.to.re "F") (str.to.re "G") (str.to.re "H") (str.to.re "J") (str.to.re "L") (str.to.re "M"))) (re.++ (str.to.re "T") (re.opt (re.union (str.to.re "A") (str.to.re "B") (str.to.re "C") (str.to.re "D") (str.to.re "E") (str.to.re "F") (str.to.re "G") (str.to.re "H") (str.to.re "J") (str.to.re "K") (str.to.re "L") (str.to.re "M") (str.to.re "N") (str.to.re "P") (str.to.re "Q") (str.to.re "R") (str.to.re "S") (str.to.re "T") (str.to.re "U") (str.to.re "V") (str.to.re "W") (str.to.re "X") (str.to.re "Y") (str.to.re "Z") (str.to.re "2")))) (str.to.re "M") (re.++ (str.to.re "W") (re.union (re.opt (re.range "1" "9")) (str.to.re "B") (str.to.re "C") (str.to.re "F") (str.to.re "G") (str.to.re "J") (str.to.re "R") (str.to.re "T")))) (str.to.re "\x0a")))))
; ^([0-1][0-9]|2[0-3]){1}:([0-5][0-9]){1}:([0-5][0-9]){1},([0-9][0-9][0-9]){1} --> ([0-1][0-9]|2[0-3]){1}:([0-5][0-9]){1}:([0-5][0-9]){1},([0-9][0-9][0-9]){1}(.*)$
(assert (not (str.in.re X (re.++ ((_ re.loop 1 1) (re.union (re.++ (re.range "0" "1") (re.range "0" "9")) (re.++ (str.to.re "2") (re.range "0" "3")))) (str.to.re ":") ((_ re.loop 1 1) (re.++ (re.range "0" "5") (re.range "0" "9"))) (str.to.re ":") ((_ re.loop 1 1) (re.++ (re.range "0" "5") (re.range "0" "9"))) (str.to.re ",") ((_ re.loop 1 1) (re.++ (re.range "0" "9") (re.range "0" "9") (re.range "0" "9"))) (str.to.re " --> ") ((_ re.loop 1 1) (re.union (re.++ (re.range "0" "1") (re.range "0" "9")) (re.++ (str.to.re "2") (re.range "0" "3")))) (str.to.re ":") ((_ re.loop 1 1) (re.++ (re.range "0" "5") (re.range "0" "9"))) (str.to.re ":") ((_ re.loop 1 1) (re.++ (re.range "0" "5") (re.range "0" "9"))) (str.to.re ",") ((_ re.loop 1 1) (re.++ (re.range "0" "9") (re.range "0" "9") (re.range "0" "9"))) (re.* re.allchar) (str.to.re "\x0a")))))
(check-sat)
