(declare-const X String)
; ^[A-Z0-9\\-\\&-]{5,12}$
(assert (str.in.re X (re.++ ((_ re.loop 5 12) (re.union (re.range "A" "Z") (re.range "0" "9") (re.range "\x5c" "\x5c") (str.to.re "&") (str.to.re "-"))) (str.to.re "\x0a"))))
; ((EQD[^']*')(RFF[^']*'){0,9}(EQN[^']*')?(TMD[^']*'){0,9}(DTM[^']*'){0,9}(LOC[^']*'){0,9}(MEA[^']*'){0,9}(DIM[^']*'){0,9}(TMP[^']*'){0,9}(RNG[^']*'){0,9}(SEL[^']*'){0,9}(FTX[^']*'){0,9}(DGS[^']*'){0,9}(EQA[^']*'){0,9}(NAD[^']*')?)((TDT[^']*')(RFF[^']*'){0,9}(LOC[^']*'){0,9}(DTM[^']*'){0,9})?
(assert (str.in.re X (re.++ (re.opt (re.++ ((_ re.loop 0 9) (re.++ (str.to.re "RFF") (re.* (re.comp (str.to.re "'"))) (str.to.re "'"))) ((_ re.loop 0 9) (re.++ (str.to.re "LOC") (re.* (re.comp (str.to.re "'"))) (str.to.re "'"))) ((_ re.loop 0 9) (re.++ (str.to.re "DTM") (re.* (re.comp (str.to.re "'"))) (str.to.re "'"))) (str.to.re "TDT") (re.* (re.comp (str.to.re "'"))) (str.to.re "'"))) (str.to.re "\x0a") ((_ re.loop 0 9) (re.++ (str.to.re "RFF") (re.* (re.comp (str.to.re "'"))) (str.to.re "'"))) (re.opt (re.++ (str.to.re "EQN") (re.* (re.comp (str.to.re "'"))) (str.to.re "'"))) ((_ re.loop 0 9) (re.++ (str.to.re "TMD") (re.* (re.comp (str.to.re "'"))) (str.to.re "'"))) ((_ re.loop 0 9) (re.++ (str.to.re "DTM") (re.* (re.comp (str.to.re "'"))) (str.to.re "'"))) ((_ re.loop 0 9) (re.++ (str.to.re "LOC") (re.* (re.comp (str.to.re "'"))) (str.to.re "'"))) ((_ re.loop 0 9) (re.++ (str.to.re "MEA") (re.* (re.comp (str.to.re "'"))) (str.to.re "'"))) ((_ re.loop 0 9) (re.++ (str.to.re "DIM") (re.* (re.comp (str.to.re "'"))) (str.to.re "'"))) ((_ re.loop 0 9) (re.++ (str.to.re "TMP") (re.* (re.comp (str.to.re "'"))) (str.to.re "'"))) ((_ re.loop 0 9) (re.++ (str.to.re "RNG") (re.* (re.comp (str.to.re "'"))) (str.to.re "'"))) ((_ re.loop 0 9) (re.++ (str.to.re "SEL") (re.* (re.comp (str.to.re "'"))) (str.to.re "'"))) ((_ re.loop 0 9) (re.++ (str.to.re "FTX") (re.* (re.comp (str.to.re "'"))) (str.to.re "'"))) ((_ re.loop 0 9) (re.++ (str.to.re "DGS") (re.* (re.comp (str.to.re "'"))) (str.to.re "'"))) ((_ re.loop 0 9) (re.++ (str.to.re "EQA") (re.* (re.comp (str.to.re "'"))) (str.to.re "'"))) (re.opt (re.++ (str.to.re "NAD") (re.* (re.comp (str.to.re "'"))) (str.to.re "'"))) (str.to.re "EQD") (re.* (re.comp (str.to.re "'"))) (str.to.re "'"))))
; ^(\$)?((\d{1,5})|(\d{1,3})(\,\d{3})*)(\.\d{1,2})?$
(assert (not (str.in.re X (re.++ (re.opt (str.to.re "$")) (re.union ((_ re.loop 1 5) (re.range "0" "9")) (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.* (re.++ (str.to.re ",") ((_ re.loop 3 3) (re.range "0" "9")))))) (re.opt (re.++ (str.to.re ".") ((_ re.loop 1 2) (re.range "0" "9")))) (str.to.re "\x0a")))))
; ^(([a-h,A-H,j-n,J-N,p-z,P-Z,0-9]{9})([a-h,A-H,j-n,J-N,p,P,r-t,R-T,v-z,V-Z,0-9])([a-h,A-H,j-n,J-N,p-z,P-Z,0-9])(\d{6}))$
(assert (not (str.in.re X (re.++ (str.to.re "\x0a") ((_ re.loop 9 9) (re.union (re.range "a" "h") (str.to.re ",") (re.range "A" "H") (re.range "j" "n") (re.range "J" "N") (re.range "p" "z") (re.range "P" "Z") (re.range "0" "9"))) (re.union (re.range "a" "h") (str.to.re ",") (re.range "A" "H") (re.range "j" "n") (re.range "J" "N") (str.to.re "p") (str.to.re "P") (re.range "r" "t") (re.range "R" "T") (re.range "v" "z") (re.range "V" "Z") (re.range "0" "9")) (re.union (re.range "a" "h") (str.to.re ",") (re.range "A" "H") (re.range "j" "n") (re.range "J" "N") (re.range "p" "z") (re.range "P" "Z") (re.range "0" "9")) ((_ re.loop 6 6) (re.range "0" "9"))))))
; (^[0-9]{2,3}\.[0-9]{3}\.[0-9]{3}\/[0-9]{4}-[0-9]{2}$)
(assert (str.in.re X (re.++ (str.to.re "\x0a") ((_ re.loop 2 3) (re.range "0" "9")) (str.to.re ".") ((_ re.loop 3 3) (re.range "0" "9")) (str.to.re ".") ((_ re.loop 3 3) (re.range "0" "9")) (str.to.re "/") ((_ re.loop 4 4) (re.range "0" "9")) (str.to.re "-") ((_ re.loop 2 2) (re.range "0" "9")))))
(check-sat)
