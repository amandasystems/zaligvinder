(declare-const X String)
; ^(B(A|B|C|J|L|N|R|S|Y)|CA|D(K|S|T)|G(A|L)|H(C|E)|IL|K(A|I|E|K|M|N|S)|L(E|C|M|V)|M(A|I|L|T|Y)|N(I|O|M|R|Z)|P(B|D|E|O|K|N|P|T|U|V)|R(A|K|S|V)|S(A|B|C|E|I|K|L|O|N|P|V)|T(A|C|N|O|R|S|T|V)|V(K|T)|Z(A|C|H|I|M|V))([ ]{0,1})([0-9]{3})([A-Z]{2})$
(assert (str.in.re X (re.++ (re.union (re.++ (str.to.re "B") (re.union (str.to.re "A") (str.to.re "B") (str.to.re "C") (str.to.re "J") (str.to.re "L") (str.to.re "N") (str.to.re "R") (str.to.re "S") (str.to.re "Y"))) (str.to.re "CA") (re.++ (str.to.re "D") (re.union (str.to.re "K") (str.to.re "S") (str.to.re "T"))) (re.++ (str.to.re "G") (re.union (str.to.re "A") (str.to.re "L"))) (re.++ (str.to.re "H") (re.union (str.to.re "C") (str.to.re "E"))) (str.to.re "IL") (re.++ (str.to.re "K") (re.union (str.to.re "A") (str.to.re "I") (str.to.re "E") (str.to.re "K") (str.to.re "M") (str.to.re "N") (str.to.re "S"))) (re.++ (str.to.re "L") (re.union (str.to.re "E") (str.to.re "C") (str.to.re "M") (str.to.re "V"))) (re.++ (str.to.re "M") (re.union (str.to.re "A") (str.to.re "I") (str.to.re "L") (str.to.re "T") (str.to.re "Y"))) (re.++ (str.to.re "N") (re.union (str.to.re "I") (str.to.re "O") (str.to.re "M") (str.to.re "R") (str.to.re "Z"))) (re.++ (str.to.re "P") (re.union (str.to.re "B") (str.to.re "D") (str.to.re "E") (str.to.re "O") (str.to.re "K") (str.to.re "N") (str.to.re "P") (str.to.re "T") (str.to.re "U") (str.to.re "V"))) (re.++ (str.to.re "R") (re.union (str.to.re "A") (str.to.re "K") (str.to.re "S") (str.to.re "V"))) (re.++ (str.to.re "S") (re.union (str.to.re "A") (str.to.re "B") (str.to.re "C") (str.to.re "E") (str.to.re "I") (str.to.re "K") (str.to.re "L") (str.to.re "O") (str.to.re "N") (str.to.re "P") (str.to.re "V"))) (re.++ (str.to.re "T") (re.union (str.to.re "A") (str.to.re "C") (str.to.re "N") (str.to.re "O") (str.to.re "R") (str.to.re "S") (str.to.re "T") (str.to.re "V"))) (re.++ (str.to.re "V") (re.union (str.to.re "K") (str.to.re "T"))) (re.++ (str.to.re "Z") (re.union (str.to.re "A") (str.to.re "C") (str.to.re "H") (str.to.re "I") (str.to.re "M") (str.to.re "V")))) (re.opt (str.to.re " ")) ((_ re.loop 3 3) (re.range "0" "9")) ((_ re.loop 2 2) (re.range "A" "Z")) (str.to.re "\x0a"))))
; ^rgb\(([01]?\d\d?|2[0-4]\d|25[0-5])\,([01]?\d\d?|2[0-4]\d|25[0-5])\,([01]?\d\d?|2[0-4]\d|25[0-5])\)$ #Matches standard web rgb pattern
(assert (str.in.re X (re.++ (str.to.re "rgb(") (re.union (re.++ (re.opt (re.union (str.to.re "0") (str.to.re "1"))) (re.range "0" "9") (re.opt (re.range "0" "9"))) (re.++ (str.to.re "2") (re.range "0" "4") (re.range "0" "9")) (re.++ (str.to.re "25") (re.range "0" "5"))) (str.to.re ",") (re.union (re.++ (re.opt (re.union (str.to.re "0") (str.to.re "1"))) (re.range "0" "9") (re.opt (re.range "0" "9"))) (re.++ (str.to.re "2") (re.range "0" "4") (re.range "0" "9")) (re.++ (str.to.re "25") (re.range "0" "5"))) (str.to.re ",") (re.union (re.++ (re.opt (re.union (str.to.re "0") (str.to.re "1"))) (re.range "0" "9") (re.opt (re.range "0" "9"))) (re.++ (str.to.re "2") (re.range "0" "4") (re.range "0" "9")) (re.++ (str.to.re "25") (re.range "0" "5"))) (str.to.re ") #Matches standard web rgb pattern\x0a"))))
; HXDownload\s+Host\x3AArcadeHourspjpoptwql\x2frlnjFrom\x3A
(assert (not (str.in.re X (re.++ (str.to.re "HXDownload") (re.+ (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))) (str.to.re "Host:ArcadeHourspjpoptwql/rlnjFrom:\x0a")))))
; User-Agent\x3A.*Host\x3A\dName=Your\+Host\+is\x3A
(assert (not (str.in.re X (re.++ (str.to.re "User-Agent:") (re.* re.allchar) (str.to.re "Host:") (re.range "0" "9") (str.to.re "Name=Your+Host+is:\x0a")))))
(check-sat)
