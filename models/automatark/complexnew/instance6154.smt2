(declare-const X String)
; ^(^(100{1,1}$)|^(100{1,1}\.[0]+?$))|(^([0]*\d{0,2}$)|^([0]*\d{0,2}\.(([0][1-9]{1,1}[0]*)|([1-9]{1,1}[0]*)|([0]*)|([1-9]{1,2}[0]*)))$)$
(assert (str.in.re X (re.union (re.++ (re.union (re.++ (re.* (str.to.re "0")) ((_ re.loop 0 2) (re.range "0" "9"))) (re.++ (re.* (str.to.re "0")) ((_ re.loop 0 2) (re.range "0" "9")) (str.to.re ".") (re.union (re.++ (str.to.re "0") ((_ re.loop 1 1) (re.range "1" "9")) (re.* (str.to.re "0"))) (re.++ ((_ re.loop 1 1) (re.range "1" "9")) (re.* (str.to.re "0"))) (re.* (str.to.re "0")) (re.++ ((_ re.loop 1 2) (re.range "1" "9")) (re.* (str.to.re "0")))))) (str.to.re "\x0a")) (re.++ (str.to.re "10") ((_ re.loop 1 1) (str.to.re "0"))) (re.++ (str.to.re "10") ((_ re.loop 1 1) (str.to.re "0")) (str.to.re ".") (re.+ (str.to.re "0"))))))
; ^([a-zA-Z].*|[1-9].*|[:./].*)\.(((a|A)(s|S)(p|P)(x|X)))$
(assert (str.in.re X (re.++ (re.union (re.++ (re.union (re.range "a" "z") (re.range "A" "Z")) (re.* re.allchar)) (re.++ (re.range "1" "9") (re.* re.allchar)) (re.++ (re.union (str.to.re ":") (str.to.re ".") (str.to.re "/")) (re.* re.allchar))) (str.to.re ".\x0a") (re.union (str.to.re "a") (str.to.re "A")) (re.union (str.to.re "s") (str.to.re "S")) (re.union (str.to.re "p") (str.to.re "P")) (re.union (str.to.re "x") (str.to.re "X")))))
; ^[0][1-9]{2}(-)[0-9]{8}$  and  ^[0][1-9]{3}(-)[0-9]{7}$  and  ^[0][1-9]{4}(-)[0-9]{6}$
(assert (str.in.re X (re.++ (str.to.re "0") ((_ re.loop 2 2) (re.range "1" "9")) (str.to.re "-") ((_ re.loop 8 8) (re.range "0" "9")) (str.to.re "  and  0") ((_ re.loop 3 3) (re.range "1" "9")) (str.to.re "-") ((_ re.loop 7 7) (re.range "0" "9")) (str.to.re "  and  0") ((_ re.loop 4 4) (re.range "1" "9")) (str.to.re "-") ((_ re.loop 6 6) (re.range "0" "9")) (str.to.re "\x0a"))))
(check-sat)
