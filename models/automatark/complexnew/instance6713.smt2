(declare-const X String)
; (\\d{1}-\\d{2}\\s*)(of +)(\\s?\\d{5})|(\\d{1}-\\d{2}\\s*)(of +)(\\s?\\d{4})|(\\d{1}-\\d{2}\\s*)(of +)(\\s?\\d{3})|(\\d{1}-\\d{2}\\s*)(of +)(\\s?\\d{2})|(\\d{1}-\\d{2}\\s*)(of +)(\\s?\\d{1})
(assert (str.in.re X (re.union (re.++ (str.to.re "\x5c") ((_ re.loop 1 1) (str.to.re "d")) (str.to.re "-\x5c") ((_ re.loop 2 2) (str.to.re "d")) (str.to.re "\x5c") (re.* (str.to.re "s")) (str.to.re "of") (re.+ (str.to.re " ")) (str.to.re "\x5c") (re.opt (str.to.re "s")) (str.to.re "\x5c") ((_ re.loop 5 5) (str.to.re "d"))) (re.++ (str.to.re "\x5c") ((_ re.loop 1 1) (str.to.re "d")) (str.to.re "-\x5c") ((_ re.loop 2 2) (str.to.re "d")) (str.to.re "\x5c") (re.* (str.to.re "s")) (str.to.re "of") (re.+ (str.to.re " ")) (str.to.re "\x5c") (re.opt (str.to.re "s")) (str.to.re "\x5c") ((_ re.loop 4 4) (str.to.re "d"))) (re.++ (str.to.re "\x5c") ((_ re.loop 1 1) (str.to.re "d")) (str.to.re "-\x5c") ((_ re.loop 2 2) (str.to.re "d")) (str.to.re "\x5c") (re.* (str.to.re "s")) (str.to.re "of") (re.+ (str.to.re " ")) (str.to.re "\x5c") (re.opt (str.to.re "s")) (str.to.re "\x5c") ((_ re.loop 3 3) (str.to.re "d"))) (re.++ (str.to.re "\x5c") ((_ re.loop 1 1) (str.to.re "d")) (str.to.re "-\x5c") ((_ re.loop 2 2) (str.to.re "d")) (str.to.re "\x5c") (re.* (str.to.re "s")) (str.to.re "of") (re.+ (str.to.re " ")) (str.to.re "\x5c") (re.opt (str.to.re "s")) (str.to.re "\x5c") ((_ re.loop 2 2) (str.to.re "d"))) (re.++ (str.to.re "\x0a\x5c") ((_ re.loop 1 1) (str.to.re "d")) (str.to.re "-\x5c") ((_ re.loop 2 2) (str.to.re "d")) (str.to.re "\x5c") (re.* (str.to.re "s")) (str.to.re "of") (re.+ (str.to.re " ")) (str.to.re "\x5c") (re.opt (str.to.re "s")) (str.to.re "\x5c") ((_ re.loop 1 1) (str.to.re "d"))))))
; /^\/[0-9]{5}\.jar$/U
(assert (str.in.re X (re.++ (str.to.re "//") ((_ re.loop 5 5) (re.range "0" "9")) (str.to.re ".jar/U\x0a"))))
; /filename=[^\n]*\x2exbm/i
(assert (not (str.in.re X (re.++ (str.to.re "/filename=") (re.* (re.comp (str.to.re "\x0a"))) (str.to.re ".xbm/i\x0a")))))
; &[a-zA-Z]+\d{0,3};
(assert (not (str.in.re X (re.++ (str.to.re "&") (re.+ (re.union (re.range "a" "z") (re.range "A" "Z"))) ((_ re.loop 0 3) (re.range "0" "9")) (str.to.re ";\x0a")))))
; ^[{|\(]?[0-9a-fA-F]{8}[-]?([0-9a-fA-F]{4}[-]?){3}[0-9a-fA-F]{12}[\)|}]?$
(assert (not (str.in.re X (re.++ (re.opt (re.union (str.to.re "{") (str.to.re "|") (str.to.re "("))) ((_ re.loop 8 8) (re.union (re.range "0" "9") (re.range "a" "f") (re.range "A" "F"))) (re.opt (str.to.re "-")) ((_ re.loop 3 3) (re.++ ((_ re.loop 4 4) (re.union (re.range "0" "9") (re.range "a" "f") (re.range "A" "F"))) (re.opt (str.to.re "-")))) ((_ re.loop 12 12) (re.union (re.range "0" "9") (re.range "a" "f") (re.range "A" "F"))) (re.opt (re.union (str.to.re ")") (str.to.re "|") (str.to.re "}"))) (str.to.re "\x0a")))))
(check-sat)
