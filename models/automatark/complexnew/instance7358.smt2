(declare-const X String)
; EFError.*\x2Fcs\x2Fpop4\x2F\s+
(assert (str.in.re X (re.++ (str.to.re "EFError") (re.* re.allchar) (str.to.re "/cs/pop4/") (re.+ (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))) (str.to.re "\x0a"))))
; User-Agent\x3AHost\x3a\x22The
(assert (not (str.in.re X (str.to.re "User-Agent:Host:\x22The\x0a"))))
; (vi(v))?d
(assert (not (str.in.re X (re.++ (re.opt (str.to.re "viv")) (str.to.re "d\x0a")))))
; ^\s*([A-Za-z]{2,4}\.?\s*)?(['\-A-Za-z]+\s*){1,2}([A-Za-z]+\.?\s*)?(['\-A-Za-z]+\s*){1,2}(([jJsSrR]{2}\.)|([XIV]{1,6}))?\s*$
(assert (str.in.re X (re.++ (re.* (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))) (re.opt (re.++ ((_ re.loop 2 4) (re.union (re.range "A" "Z") (re.range "a" "z"))) (re.opt (str.to.re ".")) (re.* (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))))) ((_ re.loop 1 2) (re.++ (re.+ (re.union (str.to.re "'") (str.to.re "-") (re.range "A" "Z") (re.range "a" "z"))) (re.* (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))))) (re.opt (re.++ (re.+ (re.union (re.range "A" "Z") (re.range "a" "z"))) (re.opt (str.to.re ".")) (re.* (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))))) ((_ re.loop 1 2) (re.++ (re.+ (re.union (str.to.re "'") (str.to.re "-") (re.range "A" "Z") (re.range "a" "z"))) (re.* (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))))) (re.opt (re.union (re.++ ((_ re.loop 2 2) (re.union (str.to.re "j") (str.to.re "J") (str.to.re "s") (str.to.re "S") (str.to.re "r") (str.to.re "R"))) (str.to.re ".")) ((_ re.loop 1 6) (re.union (str.to.re "X") (str.to.re "I") (str.to.re "V"))))) (re.* (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))) (str.to.re "\x0a"))))
(check-sat)
