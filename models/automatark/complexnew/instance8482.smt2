(declare-const X String)
; User-Agent\x3a\s+Host\x3A\s+Referer\x3a
(assert (str.in.re X (re.++ (str.to.re "User-Agent:") (re.+ (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))) (str.to.re "Host:") (re.+ (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))) (str.to.re "Referer:\x0a"))))
; ([0]|[-]?[0]\.[0-9]+)|([-]?([1-9]+\.[0-9]+))|([-]?[1-9]+)
(assert (not (str.in.re X (re.union (re.++ (re.opt (str.to.re "-")) (re.+ (re.range "1" "9")) (str.to.re ".") (re.+ (re.range "0" "9"))) (re.++ (str.to.re "\x0a") (re.opt (str.to.re "-")) (re.+ (re.range "1" "9"))) (str.to.re "0") (re.++ (re.opt (str.to.re "-")) (str.to.re "0.") (re.+ (re.range "0" "9")))))))
; \b(((((one|t((en)|(wo)|(hree)|(welve)|(hirteen))|(evelen)|(f((our)|(ive))|s((ix)|(even))|eight|nine)(teen)?))\b(\s+hundred\s*)?)| ((t((wen)|(hir))|f((or)|(if))|s((ix)|(even))|eigh|nin)ty)(-(one|t((wo)|(hree))|f((our)|(ive))|s((ix)|(even))|eight|nine))?) (\s*(hundred|thousand|((([mb]|(t|quad)r))illion))\s*(and\s+)?)?)+
(assert (not (str.in.re X (re.++ (re.+ (re.++ (re.union (re.++ (re.union (str.to.re "one") (re.++ (str.to.re "t") (re.union (str.to.re "en") (str.to.re "wo") (str.to.re "hree") (str.to.re "welve") (str.to.re "hirteen"))) (str.to.re "evelen") (re.++ (re.union (re.++ (str.to.re "f") (re.union (str.to.re "our") (str.to.re "ive"))) (re.++ (str.to.re "s") (re.union (str.to.re "ix") (str.to.re "even"))) (str.to.re "eight") (str.to.re "nine")) (re.opt (str.to.re "teen")))) (re.opt (re.++ (re.+ (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))) (str.to.re "hundred") (re.* (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d")))))) (re.++ (str.to.re " ") (re.opt (re.++ (str.to.re "-") (re.union (str.to.re "one") (re.++ (str.to.re "t") (re.union (str.to.re "wo") (str.to.re "hree"))) (re.++ (str.to.re "f") (re.union (str.to.re "our") (str.to.re "ive"))) (re.++ (str.to.re "s") (re.union (str.to.re "ix") (str.to.re "even"))) (str.to.re "eight") (str.to.re "nine")))) (re.union (re.++ (str.to.re "t") (re.union (str.to.re "wen") (str.to.re "hir"))) (re.++ (str.to.re "f") (re.union (str.to.re "or") (str.to.re "if"))) (re.++ (str.to.re "s") (re.union (str.to.re "ix") (str.to.re "even"))) (str.to.re "eigh") (str.to.re "nin")) (str.to.re "ty"))) (str.to.re " ") (re.opt (re.++ (re.* (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))) (re.union (str.to.re "hundred") (str.to.re "thousand") (re.++ (re.union (re.++ (re.union (str.to.re "t") (str.to.re "quad")) (str.to.re "r")) (str.to.re "m") (str.to.re "b")) (str.to.re "illion"))) (re.* (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))) (re.opt (re.++ (str.to.re "and") (re.+ (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))))))))) (str.to.re "\x0a")))))
; ^[ \w\.]{3,}([A-Za-z]\.)?([ \w]*\##\d+)?(\r\n| )[ \w]{3,},\x20([A-Z]{2}\.)\x20\d{5}(-\d{4})?$
(assert (str.in.re X (re.++ (re.opt (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (str.to.re "."))) (re.opt (re.++ (re.* (re.union (str.to.re " ") (re.range "0" "9") (re.range "A" "Z") (re.range "a" "z") (str.to.re "_"))) (str.to.re "##") (re.+ (re.range "0" "9")))) (re.union (str.to.re "\x0d\x0a") (str.to.re " ")) (str.to.re ",  ") ((_ re.loop 5 5) (re.range "0" "9")) (re.opt (re.++ (str.to.re "-") ((_ re.loop 4 4) (re.range "0" "9")))) (str.to.re "\x0a") ((_ re.loop 3 3) (re.union (str.to.re " ") (str.to.re ".") (re.range "0" "9") (re.range "A" "Z") (re.range "a" "z") (str.to.re "_"))) (re.* (re.union (str.to.re " ") (str.to.re ".") (re.range "0" "9") (re.range "A" "Z") (re.range "a" "z") (str.to.re "_"))) ((_ re.loop 3 3) (re.union (str.to.re " ") (re.range "0" "9") (re.range "A" "Z") (re.range "a" "z") (str.to.re "_"))) (re.* (re.union (str.to.re " ") (re.range "0" "9") (re.range "A" "Z") (re.range "a" "z") (str.to.re "_"))) ((_ re.loop 2 2) (re.range "A" "Z")) (str.to.re "."))))
; Warez\s+Online100013Agentsvr\x5E\x5EMerlin
(assert (str.in.re X (re.++ (str.to.re "Warez") (re.+ (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))) (str.to.re "Online100013Agentsvr^^Merlin\x13\x0a"))))
(check-sat)
