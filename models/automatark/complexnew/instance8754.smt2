(declare-const X String)
; /<body[^>]+?style\s*=\s*[\x22\x27](-ms-)?behavior\s*:.*?<body[^>]+?onreadystatechange\s*=[^>]+?>[\s\t\r\n]*?<\/body/si
(assert (not (str.in.re X (re.++ (str.to.re "/<body") (re.+ (re.comp (str.to.re ">"))) (str.to.re "style") (re.* (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))) (str.to.re "=") (re.* (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))) (re.union (str.to.re "\x22") (str.to.re "'")) (re.opt (str.to.re "-ms-")) (str.to.re "behavior") (re.* (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))) (str.to.re ":") (re.* re.allchar) (str.to.re "<body") (re.+ (re.comp (str.to.re ">"))) (str.to.re "onreadystatechange") (re.* (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))) (str.to.re "=") (re.+ (re.comp (str.to.re ">"))) (str.to.re ">") (re.* (re.union (str.to.re "\x09") (str.to.re "\x0d") (str.to.re "\x0a") (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))) (str.to.re "</body/si\x0a")))))
; \b ?(a|A)ppoint(s|ing|ment(s)?|ed)?| ?(J|j)oin(s|ed|ing)| ?(R)?recruit(s|ed|ing(s)?)?| (H|h)(is|er)(on)? dut(y|ies)?| ?(R)?replace(s|d|ment)?| (H)?hire(s|d)?| ?(P|p)romot(ed|es|e|ing)?| ?(D|d)esignate(s|d)| (N)?names(d)?| (his|her)? (P|p)osition(ed|s)?| re(-)?join(ed|s)|(M|m)anagement Changes|(E|e)xecutive (C|c)hanges| reassumes position| has appointed| appointment of| was promoted to| has announced changes to| will be headed| will succeed| has succeeded| to name| has named| was promoted to| has hired| bec(a|o)me(s)?| (to|will) become| reassumes position| has been elevated| assumes the additional (role|responsibilit(ies|y))| has been elected| transferred| has been given the additional| in a short while| stepp(ed|ing) down| left the company| (has)? moved| (has)? retired| (has|he|she)? resign(s|ing|ed)| (D|d)eceased| ?(T|t)erminat(ed|s|ing)| ?(F|f)ire(s|d|ing)| left abruptly| stopped working| indict(ed|s)| in a short while| (has)? notified| will leave| left the| agreed to leave| (has been|has)? elected| resignation(s)?
(assert (not (str.in.re X (re.union (re.++ (re.opt (str.to.re " ")) (re.union (str.to.re "a") (str.to.re "A")) (str.to.re "ppoint") (re.opt (re.union (str.to.re "s") (str.to.re "ing") (re.++ (str.to.re "ment") (re.opt (str.to.re "s"))) (str.to.re "ed")))) (re.++ (re.opt (str.to.re " ")) (re.union (str.to.re "J") (str.to.re "j")) (str.to.re "oin") (re.union (str.to.re "s") (str.to.re "ed") (str.to.re "ing"))) (re.++ (re.opt (str.to.re " ")) (re.opt (str.to.re "R")) (str.to.re "recruit") (re.opt (re.union (str.to.re "s") (str.to.re "ed") (re.++ (str.to.re "ing") (re.opt (str.to.re "s")))))) (re.++ (str.to.re " ") (re.union (str.to.re "H") (str.to.re "h")) (re.union (str.to.re "is") (str.to.re "er")) (re.opt (str.to.re "on")) (str.to.re " dut") (re.opt (re.union (str.to.re "y") (str.to.re "ies")))) (re.++ (re.opt (str.to.re " ")) (re.opt (str.to.re "R")) (str.to.re "replace") (re.opt (re.union (str.to.re "s") (str.to.re "d") (str.to.re "ment")))) (re.++ (str.to.re " ") (re.opt (str.to.re "H")) (str.to.re "hire") (re.opt (re.union (str.to.re "s") (str.to.re "d")))) (re.++ (re.opt (str.to.re " ")) (re.union (str.to.re "P") (str.to.re "p")) (str.to.re "romot") (re.opt (re.union (str.to.re "ed") (str.to.re "es") (str.to.re "e") (str.to.re "ing")))) (re.++ (re.opt (str.to.re " ")) (re.union (str.to.re "D") (str.to.re "d")) (str.to.re "esignate") (re.union (str.to.re "s") (str.to.re "d"))) (re.++ (str.to.re " ") (re.opt (str.to.re "N")) (str.to.re "names") (re.opt (str.to.re "d"))) (re.++ (str.to.re " ") (re.opt (re.++ (str.to.re "h") (re.union (str.to.re "is") (str.to.re "er")))) (str.to.re " ") (re.union (str.to.re "P") (str.to.re "p")) (str.to.re "osition") (re.opt (re.union (str.to.re "ed") (str.to.re "s")))) (re.++ (str.to.re " re") (re.opt (str.to.re "-")) (str.to.re "join") (re.union (str.to.re "ed") (str.to.re "s"))) (re.++ (re.union (str.to.re "M") (str.to.re "m")) (str.to.re "anagement Changes")) (re.++ (re.union (str.to.re "E") (str.to.re "e")) (str.to.re "xecutive ") (re.union (str.to.re "C") (str.to.re "c")) (str.to.re "hanges")) (str.to.re " reassumes position") (str.to.re " has appointed") (str.to.re " appointment of") (str.to.re " was promoted to") (str.to.re " has announced changes to") (str.to.re " will be headed") (str.to.re " will succeed") (str.to.re " has succeeded") (str.to.re " to name") (str.to.re " has named") (str.to.re " was promoted to") (str.to.re " has hired") (re.++ (str.to.re " bec") (re.union (str.to.re "a") (str.to.re "o")) (str.to.re "me") (re.opt (str.to.re "s"))) (re.++ (str.to.re " ") (re.union (str.to.re "to") (str.to.re "will")) (str.to.re " become")) (str.to.re " reassumes position") (str.to.re " has been elevated") (re.++ (str.to.re " assumes the additional r") (re.union (str.to.re "ole") (re.++ (str.to.re "esponsibilit") (re.union (str.to.re "ies") (str.to.re "y"))))) (str.to.re " has been elected") (str.to.re " transferred") (str.to.re " has been given the additional") (str.to.re " in a short while") (re.++ (str.to.re " stepp") (re.union (str.to.re "ed") (str.to.re "ing")) (str.to.re " down")) (str.to.re " left the company") (re.++ (str.to.re " ") (re.opt (str.to.re "has")) (str.to.re " moved")) (re.++ (str.to.re " ") (re.opt (str.to.re "has")) (str.to.re " retired")) (re.++ (str.to.re " ") (re.opt (re.union (str.to.re "has") (str.to.re "he") (str.to.re "she"))) (str.to.re " resign") (re.union (str.to.re "s") (str.to.re "ing") (str.to.re "ed"))) (re.++ (str.to.re " ") (re.union (str.to.re "D") (str.to.re "d")) (str.to.re "eceased")) (re.++ (re.opt (str.to.re " ")) (re.union (str.to.re "T") (str.to.re "t")) (str.to.re "erminat") (re.union (str.to.re "ed") (str.to.re "s") (str.to.re "ing"))) (re.++ (re.opt (str.to.re " ")) (re.union (str.to.re "F") (str.to.re "f")) (str.to.re "ire") (re.union (str.to.re "s") (str.to.re "d") (str.to.re "ing"))) (str.to.re " left abruptly") (str.to.re " stopped working") (re.++ (str.to.re " indict") (re.union (str.to.re "ed") (str.to.re "s"))) (str.to.re " in a short while") (re.++ (str.to.re " ") (re.opt (str.to.re "has")) (str.to.re " notified")) (str.to.re " will leave") (str.to.re " left the") (str.to.re " agreed to leave") (re.++ (str.to.re " ") (re.opt (str.to.re "has been")) (str.to.re " elected")) (re.++ (str.to.re " resignation") (re.opt (str.to.re "s")) (str.to.re "\x0a"))))))
; ^[\w]{3}(p|P|c|C|h|H|f|F|a|A|t|T|b|B|l|L|j|J|g|G)[\w][\d]{4}[\w]$
(assert (not (str.in.re X (re.++ ((_ re.loop 3 3) (re.union (re.range "0" "9") (re.range "A" "Z") (re.range "a" "z") (str.to.re "_"))) (re.union (str.to.re "p") (str.to.re "P") (str.to.re "c") (str.to.re "C") (str.to.re "h") (str.to.re "H") (str.to.re "f") (str.to.re "F") (str.to.re "a") (str.to.re "A") (str.to.re "t") (str.to.re "T") (str.to.re "b") (str.to.re "B") (str.to.re "l") (str.to.re "L") (str.to.re "j") (str.to.re "J") (str.to.re "g") (str.to.re "G")) (re.union (re.range "0" "9") (re.range "A" "Z") (re.range "a" "z") (str.to.re "_")) ((_ re.loop 4 4) (re.range "0" "9")) (re.union (re.range "0" "9") (re.range "A" "Z") (re.range "a" "z") (str.to.re "_")) (str.to.re "\x0a")))))
; ^[A-Z0-9<]{9}[0-9]{1}[A-Z]{3}[0-9]{7}[A-Z]{1}[0-9]{7}[A-Z0-9<]{14}[0-9]{2}$
(assert (str.in.re X (re.++ ((_ re.loop 9 9) (re.union (re.range "A" "Z") (re.range "0" "9") (str.to.re "<"))) ((_ re.loop 1 1) (re.range "0" "9")) ((_ re.loop 3 3) (re.range "A" "Z")) ((_ re.loop 7 7) (re.range "0" "9")) ((_ re.loop 1 1) (re.range "A" "Z")) ((_ re.loop 7 7) (re.range "0" "9")) ((_ re.loop 14 14) (re.union (re.range "A" "Z") (re.range "0" "9") (str.to.re "<"))) ((_ re.loop 2 2) (re.range "0" "9")) (str.to.re "\x0a"))))
(check-sat)
