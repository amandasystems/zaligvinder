(declare-const X String)
; ^(([1-9]{1})|([0-1][1-2])|(0[1-9])|([1][0-2])):([0-5][0-9])(([aA])|([pP]))[mM]$
(assert (str.in.re X (re.++ (re.union ((_ re.loop 1 1) (re.range "1" "9")) (re.++ (re.range "0" "1") (re.range "1" "2")) (re.++ (str.to.re "0") (re.range "1" "9")) (re.++ (str.to.re "1") (re.range "0" "2"))) (str.to.re ":") (re.union (str.to.re "a") (str.to.re "A") (str.to.re "p") (str.to.re "P")) (re.union (str.to.re "m") (str.to.re "M")) (str.to.re "\x0a") (re.range "0" "5") (re.range "0" "9"))))
; ^(\d{3}-\d{3}-\d{4})*$
(assert (str.in.re X (re.++ (re.* (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (str.to.re "-") ((_ re.loop 3 3) (re.range "0" "9")) (str.to.re "-") ((_ re.loop 4 4) (re.range "0" "9")))) (str.to.re "\x0a"))))
; ^ *([AaBbCcEeGgHhJjKkLlMmNnPpRrSsTtVvXxYy]\d[a-zA-Z]) *-* *(\d[a-zA-Z]\d) *$|^ *(\d{5}) *$|^ *(\d{5}) *-* *(\d{4}) *$
(assert (not (str.in.re X (re.union (re.++ (re.* (str.to.re " ")) (re.* (str.to.re " ")) (re.* (str.to.re "-")) (re.* (str.to.re " ")) (re.* (str.to.re " ")) (re.union (str.to.re "A") (str.to.re "a") (str.to.re "B") (str.to.re "b") (str.to.re "C") (str.to.re "c") (str.to.re "E") (str.to.re "e") (str.to.re "G") (str.to.re "g") (str.to.re "H") (str.to.re "h") (str.to.re "J") (str.to.re "j") (str.to.re "K") (str.to.re "k") (str.to.re "L") (str.to.re "l") (str.to.re "M") (str.to.re "m") (str.to.re "N") (str.to.re "n") (str.to.re "P") (str.to.re "p") (str.to.re "R") (str.to.re "r") (str.to.re "S") (str.to.re "s") (str.to.re "T") (str.to.re "t") (str.to.re "V") (str.to.re "v") (str.to.re "X") (str.to.re "x") (str.to.re "Y") (str.to.re "y")) (re.range "0" "9") (re.union (re.range "a" "z") (re.range "A" "Z")) (re.range "0" "9") (re.union (re.range "a" "z") (re.range "A" "Z")) (re.range "0" "9")) (re.++ (re.* (str.to.re " ")) ((_ re.loop 5 5) (re.range "0" "9")) (re.* (str.to.re " "))) (re.++ (re.* (str.to.re " ")) ((_ re.loop 5 5) (re.range "0" "9")) (re.* (str.to.re " ")) (re.* (str.to.re "-")) (re.* (str.to.re " ")) ((_ re.loop 4 4) (re.range "0" "9")) (re.* (str.to.re " ")) (str.to.re "\x0a"))))))
; AgentCSmtpsidebar\.activeshopper\.comTry2Find
(assert (not (str.in.re X (str.to.re "AgentCSmtpsidebar.activeshopper.comTry2Find\x0a"))))
; ^([0-9a-zA-Z]([-.\w]*[0-9a-zA-Z])*@(([0-9a-zA-Z])+([-\w]*[0-9a-zA-Z])*\.)+[a-zA-Z]{2,9})$
(assert (not (str.in.re X (re.++ (str.to.re "\x0a") (re.union (re.range "0" "9") (re.range "a" "z") (re.range "A" "Z")) (re.* (re.++ (re.* (re.union (str.to.re "-") (str.to.re ".") (re.range "0" "9") (re.range "A" "Z") (re.range "a" "z") (str.to.re "_"))) (re.union (re.range "0" "9") (re.range "a" "z") (re.range "A" "Z")))) (str.to.re "@") (re.+ (re.++ (re.+ (re.union (re.range "0" "9") (re.range "a" "z") (re.range "A" "Z"))) (re.* (re.++ (re.* (re.union (str.to.re "-") (re.range "0" "9") (re.range "A" "Z") (re.range "a" "z") (str.to.re "_"))) (re.union (re.range "0" "9") (re.range "a" "z") (re.range "A" "Z")))) (str.to.re "."))) ((_ re.loop 2 9) (re.union (re.range "a" "z") (re.range "A" "Z")))))))
(check-sat)
