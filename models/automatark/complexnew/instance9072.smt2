(declare-const X String)
; (((ht|f)tp(s?):\/\/)(www\.[^ \[\]\(\)\n\r\t]+)|(([012]?[0-9]{1,2}\.){3}[012]?[0-9]{1,2})\/)([^ \[\]\(\),;"\'<>\n\r\t]+)([^\. \[\]\(\),;"\'<>\n\r\t])|(([012]?[0-9]{1,2}\.){3}[012]?[0-9]{1,2})
(assert (not (str.in.re X (re.union (re.++ (re.union (re.++ (re.union (str.to.re "ht") (str.to.re "f")) (str.to.re "tp") (re.opt (str.to.re "s")) (str.to.re "://www.") (re.+ (re.union (str.to.re " ") (str.to.re "[") (str.to.re "]") (str.to.re "(") (str.to.re ")") (str.to.re "\x0a") (str.to.re "\x0d") (str.to.re "\x09")))) (re.++ (str.to.re "/") ((_ re.loop 3 3) (re.++ (re.opt (re.union (str.to.re "0") (str.to.re "1") (str.to.re "2"))) ((_ re.loop 1 2) (re.range "0" "9")) (str.to.re "."))) (re.opt (re.union (str.to.re "0") (str.to.re "1") (str.to.re "2"))) ((_ re.loop 1 2) (re.range "0" "9")))) (re.+ (re.union (str.to.re " ") (str.to.re "[") (str.to.re "]") (str.to.re "(") (str.to.re ")") (str.to.re ",") (str.to.re ";") (str.to.re "\x22") (str.to.re "'") (str.to.re "<") (str.to.re ">") (str.to.re "\x0a") (str.to.re "\x0d") (str.to.re "\x09"))) (re.union (str.to.re ".") (str.to.re " ") (str.to.re "[") (str.to.re "]") (str.to.re "(") (str.to.re ")") (str.to.re ",") (str.to.re ";") (str.to.re "\x22") (str.to.re "'") (str.to.re "<") (str.to.re ">") (str.to.re "\x0a") (str.to.re "\x0d") (str.to.re "\x09"))) (re.++ (str.to.re "\x0a") ((_ re.loop 3 3) (re.++ (re.opt (re.union (str.to.re "0") (str.to.re "1") (str.to.re "2"))) ((_ re.loop 1 2) (re.range "0" "9")) (str.to.re "."))) (re.opt (re.union (str.to.re "0") (str.to.re "1") (str.to.re "2"))) ((_ re.loop 1 2) (re.range "0" "9")))))))
; ^([-]?[0-9]?(\.[0-9]{0,2})?)$|^([-]?([1][0-1])(\.[0-9]{0,2})?)$|^([-]?([1][0-3](\.[0]{0,2})))$
(assert (not (str.in.re X (re.union (re.++ (re.opt (str.to.re "-")) (re.opt (re.range "0" "9")) (re.opt (re.++ (str.to.re ".") ((_ re.loop 0 2) (re.range "0" "9"))))) (re.++ (re.opt (str.to.re "-")) (re.opt (re.++ (str.to.re ".") ((_ re.loop 0 2) (re.range "0" "9")))) (str.to.re "1") (re.range "0" "1")) (re.++ (str.to.re "\x0a") (re.opt (str.to.re "-")) (str.to.re "1") (re.range "0" "3") (str.to.re ".") ((_ re.loop 0 2) (str.to.re "0")))))))
; \$[0-9]?[0-9]?[0-9]?((\,[0-9][0-9][0-9])*)?(\.[0-9][0-9])?$
(assert (not (str.in.re X (re.++ (str.to.re "$") (re.opt (re.range "0" "9")) (re.opt (re.range "0" "9")) (re.opt (re.range "0" "9")) (re.opt (re.* (re.++ (str.to.re ",") (re.range "0" "9") (re.range "0" "9") (re.range "0" "9")))) (re.opt (re.++ (str.to.re ".") (re.range "0" "9") (re.range "0" "9"))) (str.to.re "\x0a")))))
; ^\s*([A-Za-z]{2,4}\.?\s*)?(['\-A-Za-z]+\s*){1,2}([A-Za-z]+\.?\s*)?(['\-A-Za-z]+\s*){1,2}(([jJsSrR]{2}\.)|([XIV]{1,6}))?\s*$
(assert (str.in.re X (re.++ (re.* (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))) (re.opt (re.++ ((_ re.loop 2 4) (re.union (re.range "A" "Z") (re.range "a" "z"))) (re.opt (str.to.re ".")) (re.* (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))))) ((_ re.loop 1 2) (re.++ (re.+ (re.union (str.to.re "'") (str.to.re "-") (re.range "A" "Z") (re.range "a" "z"))) (re.* (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))))) (re.opt (re.++ (re.+ (re.union (re.range "A" "Z") (re.range "a" "z"))) (re.opt (str.to.re ".")) (re.* (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))))) ((_ re.loop 1 2) (re.++ (re.+ (re.union (str.to.re "'") (str.to.re "-") (re.range "A" "Z") (re.range "a" "z"))) (re.* (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))))) (re.opt (re.union (re.++ ((_ re.loop 2 2) (re.union (str.to.re "j") (str.to.re "J") (str.to.re "s") (str.to.re "S") (str.to.re "r") (str.to.re "R"))) (str.to.re ".")) ((_ re.loop 1 6) (re.union (str.to.re "X") (str.to.re "I") (str.to.re "V"))))) (re.* (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))) (str.to.re "\x0a"))))
(check-sat)
