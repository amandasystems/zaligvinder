(declare-const X String)
; ([AEHKLTY][ABEHKLMPRSTWXYZ]|B[ABEHKLMT]|C[ABEHKLR]|GY|[JS][ABCEGHJKLMNPRSTWXYZ]|M[AWX]|N[ABEHLMPRSWXYZ]|O[ABEHKLMPRSX]|P[ABCEGHJKLMNPRSTWXY]|R[ABEHKMPRSTWXYZ]|W[ABEKLMP]|Z[ABEHKLMPRSTWXY])[0-9]{6}[A-D]?
(assert (not (str.in.re X (re.++ (re.union (re.++ (re.union (str.to.re "A") (str.to.re "E") (str.to.re "H") (str.to.re "K") (str.to.re "L") (str.to.re "T") (str.to.re "Y")) (re.union (str.to.re "A") (str.to.re "B") (str.to.re "E") (str.to.re "H") (str.to.re "K") (str.to.re "L") (str.to.re "M") (str.to.re "P") (str.to.re "R") (str.to.re "S") (str.to.re "T") (str.to.re "W") (str.to.re "X") (str.to.re "Y") (str.to.re "Z"))) (re.++ (str.to.re "B") (re.union (str.to.re "A") (str.to.re "B") (str.to.re "E") (str.to.re "H") (str.to.re "K") (str.to.re "L") (str.to.re "M") (str.to.re "T"))) (re.++ (str.to.re "C") (re.union (str.to.re "A") (str.to.re "B") (str.to.re "E") (str.to.re "H") (str.to.re "K") (str.to.re "L") (str.to.re "R"))) (str.to.re "GY") (re.++ (re.union (str.to.re "J") (str.to.re "S")) (re.union (str.to.re "A") (str.to.re "B") (str.to.re "C") (str.to.re "E") (str.to.re "G") (str.to.re "H") (str.to.re "J") (str.to.re "K") (str.to.re "L") (str.to.re "M") (str.to.re "N") (str.to.re "P") (str.to.re "R") (str.to.re "S") (str.to.re "T") (str.to.re "W") (str.to.re "X") (str.to.re "Y") (str.to.re "Z"))) (re.++ (str.to.re "M") (re.union (str.to.re "A") (str.to.re "W") (str.to.re "X"))) (re.++ (str.to.re "N") (re.union (str.to.re "A") (str.to.re "B") (str.to.re "E") (str.to.re "H") (str.to.re "L") (str.to.re "M") (str.to.re "P") (str.to.re "R") (str.to.re "S") (str.to.re "W") (str.to.re "X") (str.to.re "Y") (str.to.re "Z"))) (re.++ (str.to.re "O") (re.union (str.to.re "A") (str.to.re "B") (str.to.re "E") (str.to.re "H") (str.to.re "K") (str.to.re "L") (str.to.re "M") (str.to.re "P") (str.to.re "R") (str.to.re "S") (str.to.re "X"))) (re.++ (str.to.re "P") (re.union (str.to.re "A") (str.to.re "B") (str.to.re "C") (str.to.re "E") (str.to.re "G") (str.to.re "H") (str.to.re "J") (str.to.re "K") (str.to.re "L") (str.to.re "M") (str.to.re "N") (str.to.re "P") (str.to.re "R") (str.to.re "S") (str.to.re "T") (str.to.re "W") (str.to.re "X") (str.to.re "Y"))) (re.++ (str.to.re "R") (re.union (str.to.re "A") (str.to.re "B") (str.to.re "E") (str.to.re "H") (str.to.re "K") (str.to.re "M") (str.to.re "P") (str.to.re "R") (str.to.re "S") (str.to.re "T") (str.to.re "W") (str.to.re "X") (str.to.re "Y") (str.to.re "Z"))) (re.++ (str.to.re "W") (re.union (str.to.re "A") (str.to.re "B") (str.to.re "E") (str.to.re "K") (str.to.re "L") (str.to.re "M") (str.to.re "P"))) (re.++ (str.to.re "Z") (re.union (str.to.re "A") (str.to.re "B") (str.to.re "E") (str.to.re "H") (str.to.re "K") (str.to.re "L") (str.to.re "M") (str.to.re "P") (str.to.re "R") (str.to.re "S") (str.to.re "T") (str.to.re "W") (str.to.re "X") (str.to.re "Y")))) ((_ re.loop 6 6) (re.range "0" "9")) (re.opt (re.range "A" "D")) (str.to.re "\x0a")))))
; \b\w+\b
(assert (not (str.in.re X (re.++ (re.+ (re.union (re.range "0" "9") (re.range "A" "Z") (re.range "a" "z") (str.to.re "_"))) (str.to.re "\x0a")))))
; ^[1-9]\d?-\d{7}$
(assert (not (str.in.re X (re.++ (re.range "1" "9") (re.opt (re.range "0" "9")) (str.to.re "-") ((_ re.loop 7 7) (re.range "0" "9")) (str.to.re "\x0a")))))
; &lt;/?([a-zA-Z][-A-Za-z\d\.]{0,71})(\s+(\S+)(\s*=\s*([-\w\.]{1,1024}|&quot;[^&quot;]{0,1024}&quot;|'[^']{0,1024}'))?)*\s*&gt;
(assert (not (str.in.re X (re.++ (str.to.re "&lt;") (re.opt (str.to.re "/")) (re.* (re.++ (re.+ (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))) (re.+ (re.comp (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d")))) (re.opt (re.++ (re.* (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))) (str.to.re "=") (re.* (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))) (re.union ((_ re.loop 1 1024) (re.union (str.to.re "-") (str.to.re ".") (re.range "0" "9") (re.range "A" "Z") (re.range "a" "z") (str.to.re "_"))) (re.++ (str.to.re "&quot;") ((_ re.loop 0 1024) (re.union (str.to.re "&") (str.to.re "q") (str.to.re "u") (str.to.re "o") (str.to.re "t") (str.to.re ";"))) (str.to.re "&quot;")) (re.++ (str.to.re "'") ((_ re.loop 0 1024) (re.comp (str.to.re "'"))) (str.to.re "'"))))))) (re.* (re.union (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))) (str.to.re "&gt;\x0a") (re.union (re.range "a" "z") (re.range "A" "Z")) ((_ re.loop 0 71) (re.union (str.to.re "-") (re.range "A" "Z") (re.range "a" "z") (re.range "0" "9") (str.to.re ".")))))))
; (([2-9]{1})([0-9]{2})([0-9]{3})([0-9]{4}))$
(assert (str.in.re X (re.++ (str.to.re "\x0a") ((_ re.loop 1 1) (re.range "2" "9")) ((_ re.loop 2 2) (re.range "0" "9")) ((_ re.loop 3 3) (re.range "0" "9")) ((_ re.loop 4 4) (re.range "0" "9")))))
(check-sat)
