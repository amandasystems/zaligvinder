(declare-const X String)
; ^([\.\"\'-/ \(/)\s\[\]\\\,\<\>\;\:\{\}]?)([0-9]{3})([\.\"\'-/\(/)\s\[\]\\\,\<\>\;\:\{\}]?)([0-9]{3})([\,\.\"\'-/\(/)\s\[\]\\\<\>\;\:\{\}]?)([0-9]{4})$
(assert (not (str.in.re X (re.++ (re.opt (re.union (str.to.re ".") (str.to.re "\x22") (re.range "'" "/") (str.to.re " ") (str.to.re "(") (str.to.re "/") (str.to.re ")") (str.to.re "[") (str.to.re "]") (str.to.re "\x5c") (str.to.re ",") (str.to.re "<") (str.to.re ">") (str.to.re ";") (str.to.re ":") (str.to.re "{") (str.to.re "}") (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))) ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.union (str.to.re ".") (str.to.re "\x22") (re.range "'" "/") (str.to.re "(") (str.to.re "/") (str.to.re ")") (str.to.re "[") (str.to.re "]") (str.to.re "\x5c") (str.to.re ",") (str.to.re "<") (str.to.re ">") (str.to.re ";") (str.to.re ":") (str.to.re "{") (str.to.re "}") (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))) ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.union (str.to.re ",") (str.to.re ".") (str.to.re "\x22") (re.range "'" "/") (str.to.re "(") (str.to.re "/") (str.to.re ")") (str.to.re "[") (str.to.re "]") (str.to.re "\x5c") (str.to.re "<") (str.to.re ">") (str.to.re ";") (str.to.re ":") (str.to.re "{") (str.to.re "}") (str.to.re " ") (str.to.re "\x09") (str.to.re "\x0a") (str.to.re "\x0c") (str.to.re "\x0d"))) ((_ re.loop 4 4) (re.range "0" "9")) (str.to.re "\x0a")))))
; ^\{([1-9]{1}|[1-9]{1}[0-9]{1,}){1}\}\{([1-9]{1}|[1-9]{1}[0-9]{1,}){1}\}(.*)$
(assert (str.in.re X (re.++ (str.to.re "{") ((_ re.loop 1 1) (re.union ((_ re.loop 1 1) (re.range "1" "9")) (re.++ ((_ re.loop 1 1) (re.range "1" "9")) (re.+ (re.range "0" "9"))))) (str.to.re "}{") ((_ re.loop 1 1) (re.union ((_ re.loop 1 1) (re.range "1" "9")) (re.++ ((_ re.loop 1 1) (re.range "1" "9")) (re.+ (re.range "0" "9"))))) (str.to.re "}") (re.* re.allchar) (str.to.re "\x0a"))))
(check-sat)
