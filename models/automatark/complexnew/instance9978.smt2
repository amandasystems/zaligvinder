(declare-const X String)
; ^[A-Z]{2}[0-9]{6}[A-DFM]{1}$
(assert (str.in.re X (re.++ ((_ re.loop 2 2) (re.range "A" "Z")) ((_ re.loop 6 6) (re.range "0" "9")) ((_ re.loop 1 1) (re.union (re.range "A" "D") (str.to.re "F") (str.to.re "M"))) (str.to.re "\x0a"))))
; (LOC[^']*')(GID[^']*')?(GDS[^']*')?(FTX[^']*'){0,9}(MEA[^']*'){1,9}(DIM[^']*'){0,9}(TMP[^']*')?(RNG[^']*')?(LOC[^']*'){0,9}(RFF[^']*')((EQD[^']*')(EQA[^']*'){0,9}(NAD[^']*')?){0,3}
(assert (not (str.in.re X (re.++ (re.opt (re.++ (str.to.re "GID") (re.* (re.comp (str.to.re "'"))) (str.to.re "'"))) (re.opt (re.++ (str.to.re "GDS") (re.* (re.comp (str.to.re "'"))) (str.to.re "'"))) ((_ re.loop 0 9) (re.++ (str.to.re "FTX") (re.* (re.comp (str.to.re "'"))) (str.to.re "'"))) ((_ re.loop 1 9) (re.++ (str.to.re "MEA") (re.* (re.comp (str.to.re "'"))) (str.to.re "'"))) ((_ re.loop 0 9) (re.++ (str.to.re "DIM") (re.* (re.comp (str.to.re "'"))) (str.to.re "'"))) (re.opt (re.++ (str.to.re "TMP") (re.* (re.comp (str.to.re "'"))) (str.to.re "'"))) (re.opt (re.++ (str.to.re "RNG") (re.* (re.comp (str.to.re "'"))) (str.to.re "'"))) ((_ re.loop 0 9) (re.++ (str.to.re "LOC") (re.* (re.comp (str.to.re "'"))) (str.to.re "'"))) ((_ re.loop 0 3) (re.++ ((_ re.loop 0 9) (re.++ (str.to.re "EQA") (re.* (re.comp (str.to.re "'"))) (str.to.re "'"))) (re.opt (re.++ (str.to.re "NAD") (re.* (re.comp (str.to.re "'"))) (str.to.re "'"))) (str.to.re "EQD") (re.* (re.comp (str.to.re "'"))) (str.to.re "'"))) (str.to.re "\x0aLOC") (re.* (re.comp (str.to.re "'"))) (str.to.re "'RFF") (re.* (re.comp (str.to.re "'"))) (str.to.re "'")))))
(check-sat)
