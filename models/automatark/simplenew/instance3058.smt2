(declare-const X String)
; (\\d{1}-\\d{2}\\s*)(of +)(\\s?\\d{5})|(\\d{1}-\\d{2}\\s*)(of +)(\\s?\\d{4})|(\\d{1}-\\d{2}\\s*)(of +)(\\s?\\d{3})|(\\d{1}-\\d{2}\\s*)(of +)(\\s?\\d{2})|(\\d{1}-\\d{2}\\s*)(of +)(\\s?\\d{1})
(assert (str.in.re X (re.union (re.++ (str.to.re "\x5c") ((_ re.loop 1 1) (str.to.re "d")) (str.to.re "-\x5c") ((_ re.loop 2 2) (str.to.re "d")) (str.to.re "\x5c") (re.* (str.to.re "s")) (str.to.re "of") (re.+ (str.to.re " ")) (str.to.re "\x5c") (re.opt (str.to.re "s")) (str.to.re "\x5c") ((_ re.loop 5 5) (str.to.re "d"))) (re.++ (str.to.re "\x5c") ((_ re.loop 1 1) (str.to.re "d")) (str.to.re "-\x5c") ((_ re.loop 2 2) (str.to.re "d")) (str.to.re "\x5c") (re.* (str.to.re "s")) (str.to.re "of") (re.+ (str.to.re " ")) (str.to.re "\x5c") (re.opt (str.to.re "s")) (str.to.re "\x5c") ((_ re.loop 4 4) (str.to.re "d"))) (re.++ (str.to.re "\x5c") ((_ re.loop 1 1) (str.to.re "d")) (str.to.re "-\x5c") ((_ re.loop 2 2) (str.to.re "d")) (str.to.re "\x5c") (re.* (str.to.re "s")) (str.to.re "of") (re.+ (str.to.re " ")) (str.to.re "\x5c") (re.opt (str.to.re "s")) (str.to.re "\x5c") ((_ re.loop 3 3) (str.to.re "d"))) (re.++ (str.to.re "\x5c") ((_ re.loop 1 1) (str.to.re "d")) (str.to.re "-\x5c") ((_ re.loop 2 2) (str.to.re "d")) (str.to.re "\x5c") (re.* (str.to.re "s")) (str.to.re "of") (re.+ (str.to.re " ")) (str.to.re "\x5c") (re.opt (str.to.re "s")) (str.to.re "\x5c") ((_ re.loop 2 2) (str.to.re "d"))) (re.++ (str.to.re "\x0a\x5c") ((_ re.loop 1 1) (str.to.re "d")) (str.to.re "-\x5c") ((_ re.loop 2 2) (str.to.re "d")) (str.to.re "\x5c") (re.* (str.to.re "s")) (str.to.re "of") (re.+ (str.to.re " ")) (str.to.re "\x5c") (re.opt (str.to.re "s")) (str.to.re "\x5c") ((_ re.loop 1 1) (str.to.re "d"))))))
(check-sat)
