(declare-const X String)
; [du]{2}|[gu]{2}|[tu]{2}|[ds]{2}|[gs]{2}|[da]{2}|[ga]{2}|[ta]{2}|[dq]{2}|[gq]{2}|[tq]{2}|[DU]{2}|[GU]{2}|[TU]{2}|[DS]{2}|[GS]{2}|[DA]{2}|[GA]{2}|[TA]{2}|[DQ]{2}|[GQ]{2}|[TQ]{2}
(assert (not (str.in.re X (re.union ((_ re.loop 2 2) (re.union (str.to.re "d") (str.to.re "u"))) ((_ re.loop 2 2) (re.union (str.to.re "g") (str.to.re "u"))) ((_ re.loop 2 2) (re.union (str.to.re "t") (str.to.re "u"))) ((_ re.loop 2 2) (re.union (str.to.re "d") (str.to.re "s"))) ((_ re.loop 2 2) (re.union (str.to.re "g") (str.to.re "s"))) ((_ re.loop 2 2) (re.union (str.to.re "d") (str.to.re "a"))) ((_ re.loop 2 2) (re.union (str.to.re "g") (str.to.re "a"))) ((_ re.loop 2 2) (re.union (str.to.re "t") (str.to.re "a"))) ((_ re.loop 2 2) (re.union (str.to.re "d") (str.to.re "q"))) ((_ re.loop 2 2) (re.union (str.to.re "g") (str.to.re "q"))) ((_ re.loop 2 2) (re.union (str.to.re "t") (str.to.re "q"))) ((_ re.loop 2 2) (re.union (str.to.re "D") (str.to.re "U"))) ((_ re.loop 2 2) (re.union (str.to.re "G") (str.to.re "U"))) ((_ re.loop 2 2) (re.union (str.to.re "T") (str.to.re "U"))) ((_ re.loop 2 2) (re.union (str.to.re "D") (str.to.re "S"))) ((_ re.loop 2 2) (re.union (str.to.re "G") (str.to.re "S"))) ((_ re.loop 2 2) (re.union (str.to.re "D") (str.to.re "A"))) ((_ re.loop 2 2) (re.union (str.to.re "G") (str.to.re "A"))) ((_ re.loop 2 2) (re.union (str.to.re "T") (str.to.re "A"))) ((_ re.loop 2 2) (re.union (str.to.re "D") (str.to.re "Q"))) ((_ re.loop 2 2) (re.union (str.to.re "G") (str.to.re "Q"))) (re.++ ((_ re.loop 2 2) (re.union (str.to.re "T") (str.to.re "Q"))) (str.to.re "\x0a"))))))
(check-sat)
