(set-logic QF_S)
(declare-fun var0 () String)
(assert (str.in.re var0 (re.++ (re.+ (re.+ (str.to.re "00"))) (re.++ (re.+ (re.union (str.to.re "11") (str.to.re "22"))) (re.++ (re.* (re.+ (str.to.re "33"))) (re.++ (re.union (re.+ (str.to.re "4")) (re.union (str.to.re "555") (str.to.re "666"))) (re.++ (re.* (re.+ (str.to.re "777"))) (re.++ (re.+ (re.+ (str.to.re "88"))) (re.++ (re.+ (re.* (str.to.re "999"))) (re.++ (re.* (re.union (str.to.re "a") (str.to.re "b"))) (re.++ (re.union (re.union (str.to.re "cc") (str.to.re "ddd")) (re.union (str.to.re "e") (str.to.re "fff"))) (re.++ (re.+ (re.* (str.to.re "gg"))) (re.++ (re.union (re.* (str.to.re "hhh")) (re.* (str.to.re "i"))) (re.++ (re.+ (re.union (str.to.re "j") (str.to.re "kk"))) (re.++ (re.* (re.union (str.to.re "lll") (str.to.re "m"))) (re.++ (re.+ (re.union (str.to.re "nnn") (str.to.re "o"))) (re.++ (re.* (re.* (str.to.re "p"))) (re.union (re.+ (str.to.re "q")) (re.* (str.to.re "rr"))))))))))))))))))))
(assert (not (str.in.re var0 (re.++ (re.+ (re.union (str.to.re "00") (str.to.re "11"))) (re.++ (re.* (re.union (str.to.re "22") (str.to.re "33"))) (re.++ (re.union (re.+ (str.to.re "444")) (re.+ (str.to.re "5"))) (re.++ (re.* (re.* (str.to.re "66"))) (re.++ (re.union (re.+ (str.to.re "77")) (re.union (str.to.re "8") (str.to.re "99"))) (re.++ (re.+ (re.* (str.to.re "a"))) (re.++ (re.* (re.union (str.to.re "bbb") (str.to.re "cc"))) (re.++ (re.* (re.* (str.to.re "d"))) (re.++ (re.union (re.union (str.to.re "e") (str.to.re "fff")) (re.union (str.to.re "ggg") (str.to.re "hhh"))) (re.++ (re.union (re.* (str.to.re "ii")) (re.union (str.to.re "jj") (str.to.re "k"))) (re.++ (re.+ (re.+ (str.to.re "lll"))) (re.++ (re.+ (re.+ (str.to.re "m"))) (re.++ (re.union (re.+ (str.to.re "nn")) (re.+ (str.to.re "ooo"))) (re.++ (re.* (re.* (str.to.re "pp"))) (re.++ (re.* (re.+ (str.to.re "qq"))) (re.+ (re.+ (str.to.re "r")))))))))))))))))))))
(check-sat)